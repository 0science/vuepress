"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[6356],{7011:(i,n,e)=>{e.r(n),e.d(n,{default:()=>s});var t=e(6252);const d=[(0,t.uE)('<h1 id="一、入门" tabindex="-1"><a class="header-anchor" href="#一、入门"><span>一、入门</span></a></h1><h2 id="_1-程序语言" tabindex="-1"><a class="header-anchor" href="#_1-程序语言"><span>1. 程序语言</span></a></h2><h3 id="_1-1-机器语言" tabindex="-1"><a class="header-anchor" href="#_1-1-机器语言"><span>1.1 机器语言</span></a></h3><p>低级语言，0和1组成的二进制代码，计算机直接识别。</p><h3 id="_1-2-汇编语言" tabindex="-1"><a class="header-anchor" href="#_1-2-汇编语言"><span>1.2 汇编语言</span></a></h3><p>面向机器的程序设计语言，用英文和字符代替二级制代码。</p><h3 id="_1-3-高级语言" tabindex="-1"><a class="header-anchor" href="#_1-3-高级语言"><span>1.3 高级语言</span></a></h3><p>语法类似英文，贴近自然语言。</p><h2 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点"><span>2. 特点</span></a></h2><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>代码量小</td><td>代码实现周期长</td></tr><tr><td>运行速度快</td><td>平台库依赖较多</td></tr><tr><td>功能丰富</td><td></td></tr></tbody></table><h2 id="_3-应用" tabindex="-1"><a class="header-anchor" href="#_3-应用"><span>3. 应用</span></a></h2><ul><li>嵌入式</li><li>web开发</li><li>高性能服务</li><li>分布式应用</li><li>游戏服务器</li><li>游戏引擎</li><li>游戏脚本</li><li>移动开发</li><li>桌面开发</li><li>操作系统</li><li>虚拟技术</li><li>数据库</li><li>编译器</li></ul><h2 id="_4-集成开发环境" tabindex="-1"><a class="header-anchor" href="#_4-集成开发环境"><span>4. 集成开发环境</span></a></h2><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。</p><h2 id="_5-第一个c程序" tabindex="-1"><a class="header-anchor" href="#_5-第一个c程序"><span>5. 第一个C程序</span></a></h2><h3 id="_5-2-calculate-c" tabindex="-1"><a class="header-anchor" href="#_5-2-calculate-c"><span>5.2 calculate.c</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include &lt;stdio.h&gt;                         /*包含头文件stdio.h*/\n#define Height 10                          /*定义常量Height*/\nint calculate(int Long, int Width);        /*用户自定义函数calculate声明*/\nint main()                                 /*主函数main*/\n{\n    int m_Long;                            /*定义整型变量m_Long,表示长度*/\n    int m_Width;                           /*定义整型变量m Width,表示宽度*/\n    int result;                            /*定义整型变量result,表示体积*/\n    printf(&quot;长方形的高度为：%d\\n&quot;, Height); /*产显示提示*/\n    printf(&quot;请输入长度\\n&quot;);                 /*显示提示*/\n    scanf(&quot;%d&quot;, &amp;m_Long);                  /*输入长方体的长度*/\n    printf(&quot;请输入宽度\\n&quot;);                 /*显示提示*/\n    scanf(&quot;%d&quot;, &amp;m_Width);                 /*输入长方体的宽度*/\n    result = calculate(m_Long, m_Width);   /*调用calculate函数，计算体积*/\n    printf(&quot;长方体的体积是：&quot;);             /*显示提示*/\n    printf(&quot;%d\\n&quot;, result);                /*输出体积大小*/\n    return 0;                              /*程序返回0*/\n}\nint calculate(int Long, int Width)         /*自定义计算体积函数calculate*/\n{\n    int result = Long * Width * Height;    /*计算体积*/\n    return result;                         /*将计算的体积结果返回*/\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306291423261.png#id=BJS7U&amp;originHeight=500&amp;originWidth=809&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306291434563.png#height=317&amp;id=XMJ7r&amp;originHeight=913&amp;originWidth=1441&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=500" alt=""></p><h2 id="_6-编译过程" tabindex="-1"><a class="header-anchor" href="#_6-编译过程"><span>6. 编译过程</span></a></h2><h3 id="_6-1-编译步骤" tabindex="-1"><a class="header-anchor" href="#_6-1-编译步骤"><span>6.1 编译步骤</span></a></h3><p>C代码编译成可执行程序经过4步：</p><ol><li><strong>预处理</strong>：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</li><li><strong>编译</strong>：检查语法，将预处理后文件编译生成汇编文件</li><li><strong>汇编</strong>：将汇编文件生成目标文件(二进制文件)</li><li><strong>链接</strong>：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去 ![](file:///C:\\Users\\Administrator\\AppData\\Local\\Temp\\ksohtml12536\\wps27.jpg)</li></ol><h3 id="_6-2-编译指令" tabindex="-1"><a class="header-anchor" href="#_6-2-编译指令"><span>6.2 编译指令</span></a></h3><p><strong>GCC命令</strong> 预处理：gcc -E hello.c -o hello.i 编  译：gcc -S hello.i -o hello.s 汇  编：gcc -c hello.s -o hello.o 链  接：gcc hello.o -o hello 一步编译：gcc hello.c -o hello</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-u file</td><td>指定生成的输出文件名为file</td></tr><tr><td>-E</td><td>只进行预处理</td></tr><tr><td>-S</td><td>只进行预处理和编译</td></tr><tr><td>-c</td><td>只进行预处理、编译和汇编</td></tr></tbody></table><table><thead><tr><th>文件后缀</th><th>含义</th></tr></thead><tbody><tr><td>.c</td><td>C 语言文件</td></tr><tr><td>.i</td><td>预处理后的 C 语言文件</td></tr><tr><td>.s</td><td>编译后的汇编文件</td></tr><tr><td>.o</td><td>编译后的目标文件</td></tr></tbody></table><h2 id="_5-代码分析" tabindex="-1"><a class="header-anchor" href="#_5-代码分析"><span>5.代码分析</span></a></h2><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>#include&lt;stido.h&gt;</td><td>包含stdio.h这个头文件</td></tr><tr><td>main()函数</td><td>主函数，有且只有一个，是C语言程序的入口，程序是从main函数开始执行，</td></tr><tr><td>{}</td><td>代码块，一个代码块内部可以有一条或者多条语句，每句以分号结尾</td></tr><tr><td>//     /**/</td><td>行注释与块注释，编译器忽视的内容，用于解释说明代码内容</td></tr><tr><td>printf函数</td><td>C语言库函数，功能是向标准输出设备输出一个字符串</td></tr><tr><td>\\n</td><td>回车换行</td></tr><tr><td>return语句</td><td>代表函数执行完毕，返回return代表函数的终止，0代表程序执行成功， -1代表程序执行失败</td></tr><tr><td>system函数</td><td>在已经运行的程序中执行另外一个外部程序</td></tr></tbody></table><h2 id="_6-编译过程-1" tabindex="-1"><a class="header-anchor" href="#_6-编译过程-1"><span>6.编译过程</span></a></h2><h1 id="二、数据类型" tabindex="-1"><a class="header-anchor" href="#二、数据类型"><span>二、数据类型</span></a></h1><h3 id="_1-标识符" tabindex="-1"><a class="header-anchor" href="#_1-标识符"><span>1.标识符</span></a></h3><p><strong>标识符</strong>：程序员在程序中给函数、变量等起名字就是标识符</p><ul><li>只能由字母(a~z、 A~Z)、数字、下划线组成</li><li>不能包含除下划线以外的其它特殊字符串</li><li>不能以数字开头</li><li>不能是C语言中的关键字</li><li>严格区分大小写</li></ul><h3 id="_2-关键字" tabindex="-1"><a class="header-anchor" href="#_2-关键字"><span>2.关键字</span></a></h3><p><strong>关键字</strong>：指一些被C语言赋予了特殊含义的单词</p><ul><li>全部都是小写</li><li>在开发工具中会显示特殊颜色</li><li>不能用作变量名、函数名等</li></ul><h2 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型"><span>3.数据类型</span></a></h2><p><strong>构造类型</strong>：使用基本类型或已构造好的数据类型，进行添加，设计，构造出新的数据类型 <strong>指针类型</strong>：值为内存地址 <strong>空类型</strong>：关键字void，对函数的返回和参数限定 <img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306300914163.png" alt=""></p><h2 id="_4-常量" tabindex="-1"><a class="header-anchor" href="#_4-常量"><span>4.常量</span></a></h2><p><strong>常量</strong>：值在程序运行过程中不可改变的量，分为数值型常量、字符型常量、符号常量</p><h3 id="_4-1-整型常量" tabindex="-1"><a class="header-anchor" href="#_4-1-整型常量"><span>4.1 整型常量</span></a></h3><p><strong>整型常量</strong>：直接使用的整型常数，分为长整型、短整型、符号整型和无符号整形</p><table><thead><tr><th>整型常量</th><th>所需类型</th></tr></thead><tbody><tr><td>10</td><td>代表int类型</td></tr><tr><td>10l, 10L</td><td>代表long类型</td></tr><tr><td>10ll, 10LL</td><td>代表long long类型</td></tr><tr><td>10u, 10U</td><td>代表unsigned int类型</td></tr><tr><td>10ul, 10UL</td><td>代表unsigned long类型</td></tr><tr><td>10ull, 10ULL</td><td>代表unsigned long long类型</td></tr><tr><td>八进制：以0开头，包含数字0~7</td><td></td></tr><tr><td>十进制：无前缀，包含数字0~9</td><td></td></tr><tr><td>十六进制：以0x开头，包含数字0<sub>9和字母a</sub>f（不区分大小写）</td><td></td></tr></tbody></table><h3 id="_4-2-浮点型常量" tabindex="-1"><a class="header-anchor" href="#_4-2-浮点型常量"><span>4.2 浮点型常量</span></a></h3><p><strong>浮点型</strong>：由整数部分和小数部分组成，分为单精度浮点数(F结尾)，双精度浮点数 科学计数法：十进制小数方法 指数方式：以幂的形式表示, 以字母e或字母E后跟一个10为底的幂数</p><ul><li>字母e或字母E后面的指数必须为整数</li><li>字母e或字母E前后必须要有数字</li><li>字母e或字母E前后不能有空格</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SciNum = 123.45            //科学计数法 \nSciNum = 1.2345e2          //指数方式\nFloatNum = 1.2345e2F       //单精度\nLongDoubleNum =123.45e-1L  //长双精度   \nDoubleNum = 1234.5e2       //双精度\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>后缀大小写通用</p></blockquote><h3 id="_4-3-字符型常量" tabindex="-1"><a class="header-anchor" href="#_4-3-字符型常量"><span>4.3 字符型常量</span></a></h3><p>字符型常量分为字符常量、字符串常量 <strong>字符常量</strong>：单引号内加一个字符 <strong>字符串常量</strong>：双引号内加多个字符</p><blockquote><p>系统会在字符串结尾加上\\0，所以字符串长度会加1 <img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306301447568.png" alt=""></p></blockquote><h3 id="_4-4-转义字符" tabindex="-1"><a class="header-anchor" href="#_4-4-转义字符"><span>4.4 转义字符</span></a></h3><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306301445634.png" alt=""></p><h3 id="_4-5-符号常量" tabindex="-1"><a class="header-anchor" href="#_4-5-符号常量"><span>4.5 符号常量</span></a></h3><p><strong>符号常量</strong>：用符号名代替固定的常量值</p><h2 id="_5-变量" tabindex="-1"><a class="header-anchor" href="#_5-变量"><span>5.变量</span></a></h2><h3 id="_5-1-整型变量" tabindex="-1"><a class="header-anchor" href="#_5-1-整型变量"><span>5.1 整型变量</span></a></h3><p><strong>整型变量</strong>：存储整型数值的变量</p><table><thead><tr><th>名称</th><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>有符号短整型</td><td>short</td><td>2Byte</td><td>-32768~32767</td></tr><tr><td>有符号基本整型</td><td>int</td><td>4Byte</td><td>-2147483648~2147483647</td></tr><tr><td>有符号长整型</td><td>long</td><td>4Byte</td><td>-2147483648~2147483647</td></tr><tr><td>有符号短整型</td><td>unsigned short</td><td>2Byte</td><td>0~65535</td></tr><tr><td>无符号基本整型</td><td>unsigned int</td><td>4Byte</td><td>0~4294967295</td></tr><tr><td>无符号长整型</td><td>unsigned long</td><td>4Byte</td><td>0~4294967295</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int Num1 = 1;                 //定义有符号基本整型\nunsigned Num2 = 2;            //定义无符号基本整型\nshort Num3 = 3;               //定义有符号短整型\nunsigned short Num4 = 4;      //定义无符号短整型\nlong Num5 = 5;                //定义有符号长整型\nunsigned long Num6 = 6;       //定义无符号长整型\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-浮点型变量" tabindex="-1"><a class="header-anchor" href="#_5-2-浮点型变量"><span>5.2 浮点型变量</span></a></h3><p><strong>浮点型变量</strong>：存储浮点型数值的变量</p><table><thead><tr><th>名称</th><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>单精度类型</td><td>float</td><td>4Byte</td><td></td></tr><tr><td>双精度类型</td><td>double</td><td>8Byte</td><td></td></tr><tr><td>长双精度类型</td><td>long double</td><td>8Byte</td><td></td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>float Num1 = 1.23f;           \ndouble Num2 = 1.23;\nlong double Num3 = 1.23;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-字符型变量" tabindex="-1"><a class="header-anchor" href="#_5-3-字符型变量"><span>5.3 字符型变量</span></a></h3><p><strong>字符型变量</strong>：将一个字符常量存储到一个字符变量中</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>char a1=&#39;a&#39;      \nchar a2=97;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306301550896.png" alt=""></p><h2 id="_6-变量的存储类别" tabindex="-1"><a class="header-anchor" href="#_6-变量的存储类别"><span>6.变量的存储类别</span></a></h2><h3 id="_6-1-静态存储与动态存储" tabindex="-1"><a class="header-anchor" href="#_6-1-静态存储与动态存储"><span>6.1 静态存储与动态存储</span></a></h3><p><strong>静态存储</strong>：程序运行时为其分配固定的存储空间<br><strong>动态存储</strong>：程序运行时根据需要动态分配空间</p><h3 id="_6-2-auto变量" tabindex="-1"><a class="header-anchor" href="#_6-2-auto变量"><span>6.2 auto变量</span></a></h3><p><strong>auto</strong>：动态变量，定义一个局部变量为自动</p><h3 id="_6-3-staticus变量" tabindex="-1"><a class="header-anchor" href="#_6-3-staticus变量"><span>6.3 staticus变量</span></a></h3><p><strong>static</strong>：静态变量</p><h3 id="_6-4-register变量" tabindex="-1"><a class="header-anchor" href="#_6-4-register变量"><span>6.4 register变量</span></a></h3><p><strong>register</strong>：寄存器存储类变量，把局部变量指定存放在寄存器中，而不是内存中</p><h3 id="_6-5-extern变量" tabindex="-1"><a class="header-anchor" href="#_6-5-extern变量"><span>6.5 extern变量</span></a></h3><p><strong>extern</strong>：外部存储变量</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//文件1\n#include&lt;stdio.h&gt;\nint main()\n{\n\textern int i;\n\tprintf(&quot;%d\\n&quot;,i);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//文件2\n#include&lt;stdio.h&gt;\nint i = 100;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306301652346.png" alt=""></p><h2 id="_7-混合运算" tabindex="-1"><a class="header-anchor" href="#_7-混合运算"><span>7.混合运算</span></a></h2><p>不同类型之间进行混合运算，要先转换为同一类型 <img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306301657086.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint a = 1;\n\tchar b = &#39;A&#39;;\n\tfloat c = 2.5f;\n\tdouble result = a+b+c;\n\tprintf(&quot;%f&quot;,result);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306301926190.png" alt=""></p><h1 id="三、运算符与表达式" tabindex="-1"><a class="header-anchor" href="#三、运算符与表达式"><span>三、运算符与表达式</span></a></h1><h2 id="_1-表达式" tabindex="-1"><a class="header-anchor" href="#_1-表达式"><span>1.表达式</span></a></h2><p>表达式由操作符和操作数组成，表达式只返回结果值</p><h2 id="_2-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_2-赋值运算符"><span>2.赋值运算符（=）</span></a></h2><p><strong>赋值表达式</strong><br><code>类型 变量名 = 常数/表达式</code></p><blockquote><p>数据大小超过数值类型的取值范围时会发生截断</p></blockquote><h2 id="_3-算术运算符" tabindex="-1"><a class="header-anchor" href="#_3-算术运算符"><span>3.算术运算符</span></a></h2><p><strong>分类</strong> 算数运算符包括单目运算符、双目运算符<br> 单目运算符包括正、负<br> 双目运算符包括乘、除、取模、加、减</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202306302011487.png" alt=""><strong>优先级</strong></p><ul><li>先乘除取余，后加减，括号优先</li><li>优先级相同，从左到右依次计算 <strong>自增/自减运算符</strong></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i = 3;\n\tint j = 3;\n\tint  A,B,C,D;\n\tA = ++i;           //先加1，再赋值 \n\tB = j++;           //先赋值，再加1，下次用 \n\tprintf(&quot;A自增后的值为%d\\n自增后的表达式值为%d\\n&quot;,i,A);\n\tprintf(&quot;B自增后的值为%d\\n自增后的表达式值为%d\\n&quot;,j,B);\n\ti = 3; \n\tj = 3;\n\tC = --i;\n\tD = j--;\n\tprintf(&quot;C自减后的值为%d\\n自减后的表达式值为%d\\n&quot;,i,C);\n\tprintf(&quot;D自减后的值为%d\\n自减后的表达式值为%d&quot;,j,D);\n\treturn 0; \n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307010913015.png" alt=""></p><h2 id="_4-关系运算符" tabindex="-1"><a class="header-anchor" href="#_4-关系运算符"><span>4.关系运算符</span></a></h2><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//比较成绩大小\n#include&lt;stdio.h&gt;\nint main() \n{\n\tint i = 0;\n\tfor(i=0;i&lt;3;i++){\n\tint Chinese,English;\n\tprintf(&quot;请输入语文成绩：&quot;,Chinese);\n\tscanf(&quot;%d&quot;,&amp;Chinese);\n\tprintf(&quot;请输入英语成绩：&quot;,English);\n\tscanf(&quot;%d&quot;,&amp;English);\n\tif(Chinese&gt;English)\n\t{\n\t\tprintf(&quot;语文成绩更高！\\n&quot;);\n\t}\n\tif(Chinese&lt;English)\n\t{\n\t\tprintf(&quot;英语成绩更高！\\n&quot;);\n\t}\n\tif(Chinese==English)\n\t{\n\t\tprintf(&quot;成绩相同！\\n&quot;);\n\t}\n}\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307010929526.png" alt=""></p><h2 id="_5-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5-逻辑运算符"><span>5.逻辑运算符</span></a></h2><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td></td><td></td></tr><tr><td>!</td><td>逻辑非</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i=1;\n\tint j=10;\n\tprintf(&quot;1为正确，0为错误！\\n&quot;);\n\tprintf(&quot;5&lt;i与j是%d\\n&quot;,5&lt;i&amp;&amp;j);\n\tprintf(&quot;5&lt;i或j是%d\\n&quot;,5&lt;i||j);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307010957203.png" alt=""></p><h2 id="_6-位逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_6-位逻辑运算符"><span>6.位逻辑运算符</span></a></h2><p><strong>位逻辑运算符</strong>可以实现位的设置、清零、取反、取补操作<br> 位逻辑运算符一般用作开关的标志</p><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>&amp;</td><td>位逻辑与</td></tr><tr><td></td><td></td></tr><tr><td>^</td><td>位逻辑非</td></tr><tr><td>~</td><td>取补</td></tr></tbody></table><h2 id="_7-逗号运算符" tabindex="-1"><a class="header-anchor" href="#_7-逗号运算符"><span>7.逗号运算符（,）</span></a></h2><p>逗号将多个表达式分隔开来</p><h2 id="_8-复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#_8-复合赋值运算符"><span>8.复合赋值运算符</span></a></h2><p>复合运算符是C语言独有的，是一种缩写形式</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Value = Value +3;        //常规写法\nValue += 3;              //缩写形式\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011012546.png" alt=""></p><h1 id="四、程序结构" tabindex="-1"><a class="header-anchor" href="#四、程序结构"><span>四、程序结构</span></a></h1><h2 id="_1-输入-输出函数" tabindex="-1"><a class="header-anchor" href="#_1-输入-输出函数"><span>1.输入/输出函数</span></a></h2><h3 id="_1-1-字符输出-putchar" tabindex="-1"><a class="header-anchor" href="#_1-1-字符输出-putchar"><span>1.1 字符输出（putchar）</span></a></h3><p><strong>putchar函数</strong>：向显示设备输出一个字符 <code>int putchar(int ch);</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tchar a,b,c,d;\n\ta = &#39;H&#39;;\n\tb = &#39;e&#39;;\n\tc = &#39;l&#39;;\n\td = &#39;o&#39;;\n\tputchar(a);\n\tputchar(b);\n\tputchar(c);\n\tputchar(c);\n\tputchar(d);\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011128597.png" alt=""></p><h3 id="_1-2-字符输入-getchar" tabindex="-1"><a class="header-anchor" href="#_1-2-字符输入-getchar"><span>1.2 字符输入（getchar）</span></a></h3><p><strong>getchar</strong>：从输入设备中输入一个字符 <code>int getchar()</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tchar a;\n\ta = getchar();\n\tputchar(a);\n\tputchar(&#39;\\n&#39;);\n\tgetchar();          //获取回车字符 \n\tputchar(getchar());\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011344105.png" alt=""></p><h3 id="_1-3-字符串输出-puts" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串输出-puts"><span>1.3 字符串输出（puts）</span></a></h3><p><strong>字符串输出</strong>：输出一个字符串到屏幕上 <code>int puts(char *str)</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tchar *a = &quot;I Love You!&quot;;    //定义字符串指针 \n\tputs(&quot;I Love You!&quot;);        //第一次输出 \n\tputs(a);                    //第二次输出 \n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011355900.png" alt=""></p><h3 id="_1-4-字符串输入-gets" tabindex="-1"><a class="header-anchor" href="#_1-4-字符串输入-gets"><span>1.4 字符串输入（gets）</span></a></h3><p><strong>字符串输入</strong>：将读取的字符保存在形式参数中 <code>gets()</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tchar a[30];         //定义一个数组 \n\tgets(a);            //获取字符串 \n\tputs(a);            //输出字符串 \n\treturn 0;           \n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011402016.png" alt=""></p><h3 id="_1-5-格式输出函数-printf" tabindex="-1"><a class="header-anchor" href="#_1-5-格式输出函数-printf"><span>1.5 格式输出函数（printf）</span></a></h3><p><strong>printf函数</strong>：输出若干任意类型的数据<br><strong>格式控制</strong>：将输出的数据转换为指定格式<br><strong>输出列表</strong>：需要输出的数据 <img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011414309.png" alt=""></p><blockquote><p>printf(&quot;%3.2f&quot;,num);   //保留三位数，两位是小数</p></blockquote><p><code>print(格式控制 输出列表)</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i = 10;\n\tfloat j = 1.23f;\n\tprintf(&quot;%d\\n&quot;,i);\n\tprintf(&quot;%f\\n&quot;,j);\n\tprintf(&quot;%s&quot;,&quot;hello world&quot;);\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011422797.png" alt=""><strong>附加格式</strong><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011424875.png" alt=""></p><blockquote><p>字母l，整数m、n</p></blockquote><h3 id="_1-6-格式输入函数-scanf" tabindex="-1"><a class="header-anchor" href="#_1-6-格式输入函数-scanf"><span>1.6 格式输入函数（scanf）</span></a></h3><p><strong>scanf函数</strong>：接收输入的数据 <img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011429202.png" alt=""><code>scanf(格式控制 地址控制)</code><strong>附加格式</strong><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011432192.png" alt=""></p><h3 id="_1-7-实例" tabindex="-1"><a class="header-anchor" href="#_1-7-实例"><span>1.7 实例</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//计算圆的面积\n#include&lt;stdio.h&gt;\nint main()\n{\n\tfloat Pai = 3.14f;\n\tfloat Area,Radius;             //定义面积，半径 \n\tputs(&quot;请输入圆的半径：&quot;);\n\tscanf(&quot;%f&quot;,&amp;Radius);\n\tArea = Radius*Radius*Pai;      //面积公式 \n\tprintf(&quot;圆的面积为：%f&quot;,Area);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011438685.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//大写字母转小写字母\n#include&lt;stdio.h&gt;\nint main()\n{\n\tchar Big,Small;\n\tputs(&quot;请输入大写字母：&quot;);\n\tBig = getchar();\n\tputs(&quot;小写字母为：&quot;);\n\tSmall = Big +32;\n\tprintf(&quot;%c\\n&quot;,Small);\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011443074.png" alt=""></p><h2 id="_2-if语句" tabindex="-1"><a class="header-anchor" href="#_2-if语句"><span>2.if语句</span></a></h2><p><strong>if</strong>：通过对表达式进行判断，根据结果决定是否进行相应操作 <code>if(表达式) 语句</code><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011506765.png" alt=""></p><h2 id="_3-if-else语句" tabindex="-1"><a class="header-anchor" href="#_3-if-else语句"><span>3.if ...else语句</span></a></h2><p><strong>if...else</strong>：可以在条件为假时，执行另一段代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>if(表达式)\n\t语句1;\nelse\n\t语句2；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011527184.png" alt=""></p><blockquote><p>esle语句必须跟在if语句后面</p></blockquote><h2 id="_4-else-if语句" tabindex="-1"><a class="header-anchor" href="#_4-else-if语句"><span>4.else if语句</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>if(表达式1) 语句1\nelse if(表达式2) 语句2\nelse if(表达式3) 语句3\nelse 语句4\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011519163.png" alt=""><strong>条件运算符</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>if(a&gt;b)\n\t{max=a;}\nelse(a&lt;b)\n\t{max=b;}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码可以用？来简化<br><code>max=(a&gt;b)?a:b;</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//计算欠款\n#include&lt;stdio.h&gt;\nint main()\n{\n\tfloat Due,Amount;\n\tint Ontime;\n\tchar a;\n\tprintf(&quot;请输入欠款金额：&quot;);\n\tscanf(&quot;%f&quot;,&amp;Due);\n\tprintf(&quot;是否及时还款?(y/n)&quot;);\n\tgetchar();\n\ta = getchar();\n\tOntime = (a==&#39;y&#39;)?1:0;               //选择操作 \n\tAmount = Ontime?Due:(Due*1.1);\n\tprintf(&quot;待还：%.2f&quot;,Amount);         //保留两位小数 \n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011648375.png" alt=""></p><h2 id="_5-switch语句" tabindex="-1"><a class="header-anchor" href="#_5-switch语句"><span>5.switch语句</span></a></h2><p><strong>switch</strong>：多分支选择语句</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>switch(表达式)\n{\n\tcase 情况1;\n\tcase 情况2;\n\tcase 情况3;\n\tdefault:默认情况\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011650831.png" alt=""></p><blockquote><p>case无匹配则执行defult，只能又有一个defult语句，每个case和defult后都要有break关键字跳出循环<br> 3个分支用if...else，3个以上用switch</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//输出分数段\n#include&lt;stdio.h&gt;\nint main()\n{\n\tchar Grade;\n\tprintf(&quot;请输入你的成绩：&quot;);\n\tscanf(&quot;%c&quot;,&amp;Grade);\n\tprintf(&quot;成绩区间为：&quot;);\n\tswitch(Grade)\n\t{\n\t\tcase&#39;A&#39;:\n\t\t\tprintf(&quot;90~100&quot;);\n\t\t\tbreak;\n\t\tcase&#39;B&#39;:\n\t\t\tprintf(&quot;80~89&quot;);\n\t\t\tbreak;\n\t\tcase&#39;C&#39;:\n\t\t\tprintf(&quot;70~79&quot;);\n\t\t\tbreak;\n\t\tcase&#39;D&#39;:\n\t\t\tprintf(&quot;60~69&quot;);\n\t\t\tbreak;\n\t\tcase&#39;E&#39;:\n\t\t\tprintf(&quot;&lt;60&quot;); \n\t\t\tbreak;\n\t } \n\t return 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307011710626.png" alt=""></p><h2 id="_6-while语句" tabindex="-1"><a class="header-anchor" href="#_6-while语句"><span>6.while语句</span></a></h2><p><strong>while</strong>：满足条件则循环执行语句，直到不满足条件时则退出循环 <code>while(表达式) 语句</code><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307020941122.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//从1加到100\n#include&lt;stdio.h&gt;\nint main()\n{\n\tint Sum= 0;\n\tint Number = 1;\n\twhile(Number&lt;=100)\n\t{\n\t\tSum = Number+Sum;\n\t\tNumber++;\n\t}\n\tprintf(&quot;%d&quot;,Sum);\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021020668.png" alt=""></p><h2 id="_7-do-while语句" tabindex="-1"><a class="header-anchor" href="#_7-do-while语句"><span>7./do while语句</span></a></h2><p><strong>do...while</strong>：无论是否满足条件，先执行一次，后面同while</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>do\n\t循环语句\nwhile(表达式)；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021026068.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint Sum = 0;\n\tint Number = 1;\n\tdo\n\t{\n\t\tSum = Number + Sum;\n\t\tNumber++;\n\t} while (Number &lt;= 100);\n\tprintf(&quot;%d&quot;,Sum);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021034922.png" alt=""></p><h2 id="_8-for语句" tabindex="-1"><a class="header-anchor" href="#_8-for语句"><span>8.for语句</span></a></h2><p><code>for(表达式1;表达式2;表达式3;)</code><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021036147.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//显示随机数\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nint main()\n{\n\tint counter;\n\tfor(counter=0;counter&lt;10;counter++)\n\t{\n\t\tsrand(counter+1);\n\t\tprintf(&quot;随机数%d为：%d\\n&quot;,counter,rand());\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021052454.png" alt=""></p><h2 id="_9-goto语句" tabindex="-1"><a class="header-anchor" href="#_9-goto语句"><span>9.goto语句</span></a></h2><p><strong>goto</strong>：无条件转移语句，使程序立即跳转到函数内任意一条可执行语句 <code>goto 标识符</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint Step,Select;\n\tfor(Step=0;Step&lt;10;Step++)\n\t{\n\t\tprintf(&quot;步骤：%d\\n&quot;,Step);\n\t\tdo\n\t\t{\n\t\t\tprintf(&quot;输入一个数字进行选择：&quot;);\n\t\t\tscanf(&quot;%d&quot;,&amp;Select);\n\t\t\tprintf(&quot;（按0退出，99进入下一步）\\n&quot;);\n\t\t\tif(Select==0)\n\t\t\t{\n\t\t\t\tgoto exit;\n\t\t\t } \n\t\t}\n\t\twhile(Select!=99);\n\t}\n\texit:\n\t\tprintf(&quot;退出程序！\\n&quot;);\n\t\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021344811.png" alt=""></p><h2 id="_10-break语句" tabindex="-1"><a class="header-anchor" href="#_10-break语句"><span>10.break语句</span></a></h2><p><strong>break</strong>：强制终止并跳出循环；</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint Count;\n\tfor(Count=0;Count&lt;10;Count++)\n\t{\n\t\tif(Count==5)\n\t\t{\n\t\t\tprintf(&quot;在这里停止！&quot;);\n\t\t\tbreak;\n\t\t}\n\t\tprintf(&quot;数字为%d\\n&quot;,Count);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021349101.png" alt=""></p><h2 id="_11-continue语句" tabindex="-1"><a class="header-anchor" href="#_11-continue语句"><span>11.continue语句</span></a></h2><p><strong>conuntie</strong>：跳过尚未执行的部分，直接进行下一次循环</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint Count;\n\tfor(Count=0;Count&lt;10;Count++)\n\t{\n\t\tif(Count==5)\n\t\t{\n\t\t\tprintf(&quot;在这继续！\\n&quot;);\n\t\t\tcontinue; \n\t\t}\n\t\tprintf(&quot;数字为：%d\\n&quot;,Count);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021411236.png" alt=""></p><h1 id="五、数组" tabindex="-1"><a class="header-anchor" href="#五、数组"><span>五、数组</span></a></h1><h2 id="_1-一维数组" tabindex="-1"><a class="header-anchor" href="#_1-一维数组"><span>1.一维数组</span></a></h2><p><strong>一维数组</strong>：存储一组相同类型的变量 <strong>数组定义</strong><br><code>类型说明符 数组标识符[常量表达式]</code><strong>数组引用</strong><br><code>数组标识符[下标]</code></p><blockquote><p>数组下标从0开始</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//反向输出数组 \n#include&lt;stdio.h&gt;\nint main()\n{\n\tint Array[5],index,temp;              //定义数组，变量 \n\tprintf(&quot;请输入一个数组：\\n&quot;);\n\tfor(index=0;index&lt;5;index++)          //输入数组 \n\t{\n\t\tscanf(&quot;%d&quot;,&amp;Array[index]);\n\t } \n\tprintf(&quot;原数组为：\\n&quot;);\n\tfor(index=0;index&lt;5;index++)          //输出原数组 \n\t{\n\t\tprintf(&quot;%d &quot;,Array[index]);\n\t } \n\tprintf(&quot;\\n&quot;);\n\tfor(index=0;index&lt;2;index++)          //交换两次，1和5换，2和4换 \n\t{\n\t\ttemp = Array[index];              //中间变量暂存数组 \n\t\tArray[index]=Array[4-index];      //第一次5给1，第二次4给2 \n\t\tArray[4-index]=temp;              //第一次1给5，第二次2给4 \n\t}\n\tprintf(&quot;反向数组为：\\n&quot;);\n\tfor(index=0;index&lt;5;index++)\n\t{\n\t\tprintf(&quot;%d &quot;,Array[index]);\n\t } \n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021557711.png" alt=""><strong>初始化</strong> 1.一一赋值，有几个数赋几个值 2.一部分赋值，未赋值为0 3.不指定数组长度赋值</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int a[5]={1,2,3,4,5};\nint a[5]={1,2,3};\nint a[]={1,2,3,4,5}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//数组保存姓名\n#include&lt;stdio.h&gt;\nint main()\n{\n\tchar *Name[3];          //字符指针数组\n\tint i;\n\tName[0] = &quot;张三&quot;; \n\tName[1] = &quot;李四&quot;;\n\tName[2] = &quot;王五&quot;;\n\tfor(i=0;i&lt;3;i++)\n\t{\n\t\tprintf(&quot;%s\\n&quot;,Name[i]);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021628192.png" alt=""></p><h2 id="_2-二维数组" tabindex="-1"><a class="header-anchor" href="#_2-二维数组"><span>2.二维数组</span></a></h2><p><strong>二维数组</strong>：由行和列组成的两个一维数组 <strong>数组定义</strong><br><code>数据类型 数组名[表达式1][表达式2]</code></p><blockquote><p>先放行，再放列<br> 下标可以是整型常量或整型表达式 <strong>数组引用</strong><br><code>数组名[下标][下标]</code><strong>初始化</strong> 1.一一赋值 2.省略行下标，不能省略列下标 3.分组分配 4.部分分配 5.对元素赋值</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int a[2][3]={1,2,3,4,5,6};\nint a[][3]={1,2,3,4,5,6};\nint a[2][3]={{1,2,3},{4,5,6}};\nint a[2][3]={{1,2},{3,4}};\nint a[2][3];a[0][0]=1;a[0][1]=2;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//输出最值并行列互换\n#include&lt;stdio.h&gt;\nint main()\n{\n\tint a[2][3],b[3][2];\n\tint max,min;\n\tint i,j,k,l;\n\tprintf(&quot;请输入一个二维数组：\\n&quot;); \n\tfor(i=0;i&lt;2;i++)                  //输入数组 \n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tprintf(&quot;a[%d][%d]=&quot;,i,j);\n\t\t\tscanf(&quot;%d&quot;,&amp;a[i][j]);\n\t\t}\n\t}\n\tprintf(&quot;二维数组为：\\n&quot;);\n\tfor(i=0;i&lt;2;i++)\n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tprintf(&quot;%d\\t&quot;,a[i][j]);\n\t\t}\n\t\tprintf(&quot;\\n&quot;);                 //分行 \n\t}\n\t/*求数组中的最大值及其下标*/\n\tmax = a[0][0];\n\tk=0;l=0;\n\tfor(i=0;i&lt;2;i++) \n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tif(max&lt;a[i][j])\n\t\t\t{\n\t\t\t\tmax=a[i][j];\n\t\t\t\tk=i;\n\t\t\t\tl=j;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(&quot;数组中的最大值为：\\n&quot;);\n\tprintf(&quot;a[%d][%d]=%d&quot;,k,l,max);\n\tprintf(&quot;\\n&quot;);\n\t/*求数组中的最小值及其下标*/\n\tmin = a[0][0];\n\tk=0;l=0;\n\tfor(i=0;i&lt;2;i++) \n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tif(min&gt;a[i][j])\n\t\t\t{\n\t\t\t\tmin=a[i][j];\n\t\t\t\tk=i;\n\t\t\t\tl=j;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(&quot;数组中的最小值为：\\n&quot;);\n\tprintf(&quot;a[%d][%d]=%d&quot;,k,l,min);\n\tprintf(&quot;\\n&quot;);\n\t/*求行列互换后的数组*/\n\tfor(i=0;i&lt;2;i++)\n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tb[j][i] = a[i][j];\n\t\t}\n\t } \n\tprintf(&quot;转换后的代码为：\\n&quot;);\n\t\tfor(i=0;i&lt;3;i++)\n\t{\n\t\tfor(j=0;j&lt;2;j++)\n\t\t{\n\t\t\tprintf(&quot;%d\\t&quot;,b[i][j]);\n\t\t}\n\t\tprintf(&quot;\\n&quot;);\n\t } \n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307021725402.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//求对角元素之和 \n#include&lt;stdio.h&gt;\nint main()\n{\n\tint a[3][3];\n\tint i,j,sum=0;\n\tprintf(&quot;请输入：\\n&quot;);\n\tfor(i=0;i&lt;3;i++)\n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tscanf(&quot;%d&quot;,&amp;a[i][j]);\n\t\t}\n\t}\n\tfor(i=0;i&lt;3;i++)\n\t{\n\t\tfor(j=0;j&lt;3;j++)\n\t\t{\n\t\t\tif(i==j)\n\t\t\t{\n\t\t\t\tsum = sum + a[i][j];\n\t\t\t}\n\t\t}\n\t}\n\tprintf(&quot;结果为：%d\\n&quot;,sum);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307022300543.png" alt=""></p><h2 id="_3-字符数组" tabindex="-1"><a class="header-anchor" href="#_3-字符数组"><span>3.字符数组</span></a></h2><p><strong>字符数组</strong>：数据元素为字符的数组 <strong>数组定义</strong><br><code>char 数组标识符[常量表达式]</code><strong>初始化</strong> 1.一一对应 2.省略数组长度 3.利用字符串</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>char a[5]={&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;};\nchar a[]={&#39;H&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;};\nchar a[5]={&quot;Hello&quot;};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\\0为结束的标志<br> %c输出字符，%s输出字符串</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//计算单词个数 \n#include&lt;stdio.h&gt;\nint main()\n{\n\tchar a[100];\n\tint i,Word=1;\n\tchar Blank;\n\tgets(a);\n\tif(a[0]==&#39;\\0&#39;)\n\t{\n\t\tprintf(&quot;这里没有字符！\\n&quot;);\n\t } \n\telse if(a[0]==&#39; &#39;)\n\t{\n\t\tprintf(&quot;第一个字符为空格！\\n&quot;);\n\t}\n\telse\n\t{\n\t\tfor(i=0;a[i]!=&#39;\\0&#39;;i++)\n\t\t{\n\t\t\tBlank= a[i];\n\t\t\tif(Blank==&#39; &#39;)\n\t\t\t{\n\t\t\t\tWord++;\n\t\t\t}\n\t\t} \n\t\tprintf(&quot;单词数为%d&quot;,Word);\n\t}\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307030940224.png" alt=""></p><h2 id="_4-多维数组" tabindex="-1"><a class="header-anchor" href="#_4-多维数组"><span>4.多维数组</span></a></h2><p><strong>多维数组</strong>：与二维数组相同，不过下标更多 <code>数据类型 数组名[常量表达式1][常量表达式2][常量表达式3]</code></p><h2 id="_5-排序算法" tabindex="-1"><a class="header-anchor" href="#_5-排序算法"><span>5.排序算法</span></a></h2><h3 id="_5-1-选择排序法" tabindex="-1"><a class="header-anchor" href="#_5-1-选择排序法"><span>5.1 选择排序法</span></a></h3><p><strong>选择排序法</strong>：从小到大排列时，将第一个数字与最小值换位，第二个数字与剩下的最小值换位，以此类推，直至所以数字都换过位置</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i,j;\n\tint a[10];\n\tint temp,pos;                       //定义临时变量，临时位置 \n\tprintf(&quot;请输入数组元素值：\\n&quot;);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;a[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;a[i]);\n\t}\n\t/*从小到大排序*/\n\tfor(i=0;i&lt;9;i++)                   \n\t{\n\t\ttemp = a[i];\t\t\t\t\t//记录当前元素的值 \n\t\tpos = i;\t\t\t\t\t\t//记录当前元素的位置 \n\t\tfor(j=i+1;j&lt;10;j++)\n\t\t{\n\t\t\tif(a[j]&lt;temp)\t\t\t\t//比较大小 \n\t\t\t{\n\t\t\t\ttemp = a[j];\t\t\t//最小值替换当前元素值 \n\t\t\t\tpos = j;\t\t\t\t//最小值替换当前元素位置 \n\t\t\t}\n\t\t}\n\t\ta[pos] = a[i]; \t\t\t\t\t//交换元素 \n\t\ta[i] = temp;\t\t\t\t\t//交换值 \n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;%d\\t&quot;,a[i]);\n\t\tif(i==4)\n\t\t\tprintf(&quot;\\n&quot;);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307031748551.png" alt=""></p><h3 id="_5-2-冒泡排序法" tabindex="-1"><a class="header-anchor" href="#_5-2-冒泡排序法"><span>5.2 冒泡排序法</span></a></h3><p><strong>冒泡排序法</strong>：每次比较相邻的两个数，将较小的数放在较大的数前面</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i,j,temp;\n\tint a[10];\n\tprintf(&quot;请输入一个数组：\\n&quot;);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;a[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;a[i]);\n\t } \n\t/*从小到大排序*/\n\tfor(i=1;i&lt;10;i++)\n\t{\n\t\tfor(j=9;j&gt;=i;j--)\n\t\t{\n\t\t\tif(a[j]&lt;a[j-1])\n\t\t\t{\n\t\t\t\ttemp = a[j-1];\n\t\t\t\ta[j-1] = a[j];\n\t\t\t\ta[j] = temp;\n\t\t\t}\n\t\t}\t\n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;%d\\t&quot;,a[i]);\n\t\tif(i==4)\n\t\tprintf(&quot;\\n&quot;);\n\t}\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307041709555.png" alt=""></p><h3 id="_5-3-交换排序法" tabindex="-1"><a class="header-anchor" href="#_5-3-交换排序法"><span>5.3 交换排序法</span></a></h3><p><strong>交换排序法</strong>：将每一个数与后面所有数一一比较，数据符合则交换位置</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i,j,temp;\n\tint a[10];\n\tprintf(&quot;请输入一个数组元素：\\n&quot;);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;a[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;a[i]);\n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tfor(j=i+1;j&lt;10;j++)\n\t\t{\n\t\t\tif(a[j]&lt;a[i])\n\t\t\t{\n\t\t\t\ttemp = a[i];\n\t\t\t\ta[i] = a[j];\n\t\t\t\ta[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;%d\\t&quot;,a[i]);\n\t\tif(i==4)\n\t\t{\n\t\t\tprintf(&quot;\\n&quot;);\n\t\t}\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307041739086.png" alt=""></p><h3 id="_5-4-插入排序法" tabindex="-1"><a class="header-anchor" href="#_5-4-插入排序法"><span>5.4 插入排序法</span></a></h3><p><strong>插入排序法</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint i,j,temp,pos;\n\tint a[10];\n\tprintf(&quot;请输入一个数组：\\n&quot;);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;a[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;a[i]);\n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\ttemp = a[i];\n\t\tpos =  i-1;\n\t\twhile((pos&gt;=0)&amp;&amp;(temp&lt;a[pos]))\n\t\t{\n\t\t\ta[pos+1] = a[pos];\n\t\t\tpos--;\n\t\t}\n\t\ta[pos+1] = temp;\n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;%d\\t&quot;,a[i]);\n\t\tif(i==4)\n\t\tprintf(&quot;\\n&quot;);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307051307508.png" alt=""></p><h3 id="_5-5-折半排序法" tabindex="-1"><a class="header-anchor" href="#_5-5-折半排序法"><span>5.5 折半排序法</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid CelerityRun(int left,int right,int array[]);\nint main()\n{\n\tint i;\n\tint a[10];\n\tprintf(&quot;请输入一个数组：\\n&quot;);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;a[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;a[i]);\n\t}\n\tCelerityRun(0,9,a);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;%d\\t&quot;,a[i]);\n\t\tif(i==4)\n\t\tprintf(&quot;\\n&quot;);\n\t}\n\treturn 0;\n}\nvoid CelerityRun(int left,int right,int array[])\n{\n\tint i,j;\n\tint middle,temp;\n\ti = left;\n\tj = right;\n\tmiddle = array[(left+right)];\n\tdo\n\t{\n\t\twhile((array[i]&lt;middle)&amp;&amp;(i&lt;right))\n\t\t\ti++;\n\t\twhile((array[j]&gt;middle)&amp;&amp;(j&gt;left))\n\t\t\tj--;\n\t\tif(i&lt;=j)\n\t\t{\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t\ti++;\n\t\t\tj--;\n \t\t}\n\t}while(i&lt;=j);\n\tif(left&lt;j)\n\t\tCelerityRun(left,j,array);\n\tif(right&gt;i)\n\t\tCelerityRun(i,right,array);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307060922773.png" alt=""></p><h2 id="_6-字符串处理" tabindex="-1"><a class="header-anchor" href="#_6-字符串处理"><span>6.字符串处理</span></a></h2><h3 id="_6-1-字符串复制-strcpy" tabindex="-1"><a class="header-anchor" href="#_6-1-字符串复制-strcpy"><span>6.1 字符串复制（strcpy）</span></a></h3><p><strong>strcpy函数</strong>：复制特定长度的字符串到另一个字符串中 <code>strcpy(目的字符数组名，源字符数组名)</code></p><blockquote><p>不能用赋值语句直接赋值</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tchar a[30],b[30];\n\tprintf(&quot;输入一个目的字符串：\\n&quot;);\n\tgets(a);\n\tprintf(&quot;输入一个源字符串：\\n&quot;);\n\tgets(b);\n\tstrcpy(a,b);\n\tprintf(&quot;复制后的目的字符串：\\n&quot;);\n\tputs(a);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307060950245.png" alt=""></p><h3 id="_6-2-字符串连接-strcat" tabindex="-1"><a class="header-anchor" href="#_6-2-字符串连接-strcat"><span>6.2 字符串连接（strcat）</span></a></h3><p><strong>strcat函数</strong>：将一个字符串连接到另一个字符串的末尾，组成一个新的字符串 <code>strcat(目的字符数组名，源字符数组名)</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int main()\n{\n\tchar a[30],b[30];\n\tprintf(&quot;输入一个目的字符串：\\n&quot;);\n\tgets(a);\n\tprintf(&quot;输入一个源字符串：\\n&quot;);\n\tgets(b);\n\tstrcat(a,b);\n\tprintf(&quot;连接后的目的字符串：\\n&quot;);\n\tputs(a);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307060958243.png" alt=""></p><h3 id="_6-3-字符串比较-strcmp" tabindex="-1"><a class="header-anchor" href="#_6-3-字符串比较-strcmp"><span>6.3 字符串比较（strcmp）</span></a></h3><p><strong>strcmp函数</strong>：将一个字符串与另一个字符串一一比较 <code>strcmp(字符数组1，字符数组2)</code> 字符串1=字符串2 ，返回0<br> 字符串1&gt;字符串2，返回正数<br> 字符串1&lt;字符串2，返回负数</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tchar user[20]={&quot;root&quot;};\n\tchar password[20]={&quot;123456&quot;};\n\tchar u[20],p[20];\n\tint i=0;\n\twhile(i&lt;3)\n\t{\n\t\tprintf(&quot;请输入用户名：\\n&quot;);\n\t\tgets(u);\n\t\tprintf(&quot;请输入密码：\\n&quot;);\n\t\tgets(p);\n\t\tif(strcmp(user,u))\n\t\t{\n\t\t\tprintf(&quot;用户名输入错误!\\n&quot;);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(strcmp(password,p))\n\t\t\t{\n\t\t\t\tprintf(&quot;密码错误！\\n&quot;);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprintf(&quot;欢迎使用！\\n&quot;);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(i==3)\n\t{\n\t\tprintf(&quot;连续输入错误3次！\\n&quot;);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061018127.png" alt=""><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061020235.png" alt=""></p><h3 id="_6-4-字符串大小写转换-strupr-strlwr" tabindex="-1"><a class="header-anchor" href="#_6-4-字符串大小写转换-strupr-strlwr"><span>6.4 字符串大小写转换（strupr/strlwr）</span></a></h3><p><strong>strupr函数</strong>：将字符串中的小写字母转换为大写字母其他不变 <code>strupr(字符串)</code><strong>strlwr函数</strong>：将字符串中的大写字母转换为小写字母其他不变 <code>strlwr(字符串)</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n\tchar text[20],change[20];\n\tint num;\n\tint i=0;\n\tprintf(&quot;（1转为大写，2转为小写，0退出）\\n&quot;);\n\twhile(1)\n\t{\n\t\tprintf(&quot;请输入转换方式：\\n&quot;);\n\t\tscanf(&quot;%d&quot;,&amp;num);\n\t\tif(num==1)\n\t\t{\n\t\t\tprintf(&quot;请输入一个字符串：\\n&quot;);\n\t\t\tscanf(&quot;%s&quot;,&amp;text);\n\t\t\tstrcpy(change,text);\n\t\t\tstrupr(change);\n\t\t\tprintf(&quot;转换完的字符串为：%s\\n&quot;,change);\t\t\t\n\t\t}\n\t\telse if(num==2)\n\t\t{\n\t\t\tprintf(&quot;请输入一个字符串：\\n&quot;);\n\t\t\tscanf(&quot;%s&quot;,&amp;text);\n\t\t\tstrcpy(change,text);\n\t\t\tstrlwr(change);\n\t\t\tprintf(&quot;转换完的字符串为：%s\\n&quot;,change);\n\t\t}\n\t\telse if(num==0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061047884.png" alt=""></p><h3 id="_6-5-字符串长度-strlen" tabindex="-1"><a class="header-anchor" href="#_6-5-字符串长度-strlen"><span>6.5 字符串长度（strlen）</span></a></h3><p><strong>strlen函数</strong>：计算字符串的实际长度，不含\\0 <code>strlen(字符数组名)</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n\tchar text[50],connect[50];\n\tint num;\n\tprintf(&quot;请输入一个字符串：\\n&quot;);\n\tscanf(&quot;%s&quot;,&amp;text);\n\tnum = strlen(text);\n\tprintf(&quot;字符串长度为：%d\\n&quot;,num);\n\tprintf(&quot;请再输入一个字符串：\\n&quot;);\n\tscanf(&quot;%s&quot;,&amp;connect);\n\tnum=strlen(connect);\n\tprintf(&quot;字符长度为：%d\\n&quot;,num);\n\tstrcat(text,connect);\n\tprintf(&quot;连接后的字符串：%s\\n&quot;,text);\n\tnum = strlen(text);\n\tprintf(&quot;连接后的字符长度为：%d&quot;,num);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061400397.png" alt=""></p><h2 id="_7-应用" tabindex="-1"><a class="header-anchor" href="#_7-应用"><span>7.应用</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//反转字符串 \n#include&lt;stdio.h&gt;\nint main()\n{\n\tint i,size;\n\tchar a[7]={&quot;abcdefg&quot;};\n\tchar b[7]={0};\n\tsize=sizeof(a);\n\tfor(i=0;i&lt;6;i++)\n\t{\n\t\tb[size-i-2]=a[i];\n\t}\n\tprintf(&quot;输出源字符为：%s\\n&quot;,a);\n\tprintf(&quot;输出目标字符为：%s\\n&quot;,b);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061412072.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//输出系统时间和日期 \n#include&lt;stdio.h&gt;\n#include&lt;time.h&gt;\nint main()\n{\n\tint command[4]={0,1,2,3};\n\tint num;\n\tstruct tm *Time;\n\tprintf(&quot;1-显示时间\\n2-显示日期\\n3-退出\\n&quot;);\n\twhile(1)\n\t{\n\t\tprintf(&quot;\\n请输入命令：&quot;);\n\t\tscanf(&quot;%d&quot;,&amp;num);\n\t\tif(command[1]==num)\n\t\t{\n\t\t\ttime_t nowTime;\n\t\t\ttime(&amp;nowTime);\n\t\t\tTime=localtime(&amp;nowTime);\n\t\t\tprintf(&quot;系统时间：%d:%d:%d\\n&quot;,Time-&gt;tm_hour,Time-&gt;tm_min,Time-&gt;tm_sec);\n\t\t}\n\t\telse if(command[2]==num)\n\t\t{\n\t\t\ttime_t nowTime;\n\t\t\ttime(&amp;nowTime);\n\t\t\tTime=localtime(&amp;nowTime);\n\t\t\tprintf(&quot;系统日期：%d/%d/%d\\n&quot;,1900+Time-&gt;tm_year,Time-&gt;tm_mon+1,Time-&gt;tm_mday);\n\t\t}\n\t\telse if(command[3]==num)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t} \n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061532401.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//字符串加密、解密 \n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n{\n\tint i;\n\tint result = 1;\n\tint count = 0;\n\tchar Text[128]={&#39;\\0&#39;};\n\tchar cryptograph[128]={&#39;\\0&#39;};\n\tprintf(&quot;(1为加密，2为解密，3为退出)\\n&quot;);\n\twhile(1)\n\t{\n\t\tprintf(&quot;\\n请输入命令：&quot;);\n\t\tscanf(&quot;%d&quot;,&amp;result);\n\t\tif(result==1)\n\t\t{\n\t\t\tprintf(&quot;输入要加密的明文：&quot;);\n\t\t\tscanf(&quot;%s&quot;,&amp;Text);\n\t\t\tcount = strlen(Text);\n\t\t\tfor(i=0;i&lt;count;i++)\n\t\t\t{\n\t\t\t\tcryptograph[i]=Text[i]+i+5;\n\t\t\t}\n\t\t\tcryptograph[i]=&#39;\\0&#39;;\n\t\t\tprintf(&quot;加密后的密文是：%s\\n&quot;,cryptograph);\n\t\t}\n\t\telse if(result==2)\n\t\t{\n\t\t\tcount=strlen(Text);\n\t\t\tfor(i=0;i&lt;count;i++)\n\t\t\t{\n\t\t\t\tText[i] = cryptograph[i]-i-5;\n\t\t\t}\n\t\t\tText[i]=&#39;\\0&#39;;\n\t\t\tprintf(&quot;解密后的明文是：%s\\n&quot;,Text);\n\t\t}\n\t\telse if(result==3)\n\t\t{\n\t\t\tprintf(&quot;运行结束!\\n&quot;);\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(&quot;请输入字符：\\n&quot;);\n\t\t} \n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307061639904.png" alt=""></p><h1 id="六、函数" tabindex="-1"><a class="header-anchor" href="#六、函数"><span>六、函数</span></a></h1><h2 id="_1-函数概述" tabindex="-1"><a class="header-anchor" href="#_1-函数概述"><span>1.函数概述</span></a></h2><p>1.函数是C语言的基本单元，包含可执行代码 2.主函数可以调用其他函数，其他函数可以相互调用 3.函数可以有参数和返回值</p><h2 id="_2-函数定义" tabindex="-1"><a class="header-anchor" href="#_2-函数定义"><span>2.函数定义</span></a></h2><p><strong>函数定义</strong>：让编译器知道函数功能，包括定义函数头和函数体 函数头分为返回值类型、函数名、参数表 函数体包括局部变量的声明和函数的可执行代码 无参函数：没有参数的函数 空函数：没有任何内容的函数（占位）</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int AddTwoNumber(int Num1,int Num2)\n{\n\tint result;\n\tresult = num1+num2;\n\treturn result;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>函数要先声明，再定义<br> 如果函数定义放在调用之前，就不需要声明</p></blockquote><h2 id="_3-返回语句" tabindex="-1"><a class="header-anchor" href="#_3-返回语句"><span>3.返回语句</span></a></h2><p><strong>返回语句</strong>：从所在函数中退出，回到调用程序中去，或者将函数值赋给调用的表达式</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//从函数返回\n#include&lt;stdio.h&gt;\nint Function();\nint main()\n{\n\tprintf(&quot;这是输出前\\n&quot;);\n\tFunction();\n\tprintf(&quot;这是输出后\\n&quot;);\n\treturn 0;\n } \nint Function()\n{\n\tprintf(&quot;这是输出中\\n&quot;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307081135064.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//返回函数值 \n#include&lt;stdio.h&gt;\nint Minus(int Number1,int Number2)\n{\n\tint result;\n\tresult = Number1-Number2;\n\treturn result;\n}\nint main()\n{\n\tint result;\n\tresult=Minus(9,5);\n\tprintf(&quot;%d&quot;,result); \n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307081550416.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nchar ShowChar();\nint main()\n{\n\tchar Result;\n\tResult = ShowChar();\n\tprintf(&quot;%c\\n&quot;,Result);\n\treturn 0;\n}\nchar ShowChar()\n{\n\tint Number;\n\tprintf(&quot;请输入一个数：\\n&quot;);\n\tscanf(&quot;%d&quot;,&amp;Number);\n\treturn Number;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307081557175.png" alt=""></p><h2 id="_4-函数参数" tabindex="-1"><a class="header-anchor" href="#_4-函数参数"><span>4.函数参数</span></a></h2><h3 id="_4-1-形参与实参" tabindex="-1"><a class="header-anchor" href="#_4-1-形参与实参"><span>4.1 形参与实参</span></a></h3><p><strong>形式参数</strong>：形式上存在的参数，放在括号里面，在拿书调用之前，传递给函数的值将被复制到形式参数中 <strong>实际参数</strong>：实际存在的参数，函数调用者提供给函数的参数</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid DrinkMilk(char *Bottle);\nint main()\n{\n\tchar Poke[]=&quot;&quot;;\n\tprintf(&quot;给宝宝喝:&quot;);\n\tscanf(&quot;%s&quot;,&amp;Poke);\n\tDrinkMilk(Poke);\n\treturn 0;\n}\nvoid DrinkMilk(char *Bottle)\n{\n\tprintf(&quot;宝宝喝%s\\n&quot;,Bottle);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100810565.png" alt=""></p><h3 id="_4-2-数组参数" tabindex="-1"><a class="header-anchor" href="#_4-2-数组参数"><span>4.2 数组参数</span></a></h3><blockquote><p>数组作为实参时，只传递数组的地址，而不是传递整个数组<br> 数组名作实参时，传递数组第一个元素的指针</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid ShowMember(int Member);\nint main()\n{\n\tint Count[10];\n\tint i;\n\tprintf(&quot;请输入一个数组：\\n&quot;);\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tscanf(&quot;%d&quot;,&amp;Count[i]);\n\t}\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tShowMember(Count[i]);\n\t}\n\treturn 0;\n } \nvoid ShowMember(int Member)\n{\n\tprintf(&quot;数组元素为：%d\\n&quot;,Member);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100824091.png" alt=""></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid Evalute(int b[10]);\nvoid Display(int b[10]);\nint main()\n{\n\tint a[10];\n\tEvalute(a);\n\tDisplay(a);\n\treturn 0;\n}\nvoid Display(int b[10])\n{\n\tint i;\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;数组元素是：%d\\n&quot;,b[i]);\n\t}\n}\nvoid Evalute(int b[10])\n{\n\tint i;\t\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tb[i]=i;\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100910582.png" alt=""></p><h3 id="_4-3-指针作参数" tabindex="-1"><a class="header-anchor" href="#_4-3-指针作参数"><span>4.3 指针作参数</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid Evalute(int *Point);\nvoid Display(int *Point);\nint main()\n{\n\tint a[10];\n\tEvalute(a);\n\tDisplay(a);\n\treturn 0;\n}\nvoid Display(int *Point)\n{\n\tint i;\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tprintf(&quot;数组元素为：%d\\n&quot;,Point[i]);\n\t}\n}\nvoid Evalute(int *Point)\n{\n\tint i;\n\tfor(i=0;i&lt;10;i++)\n\t{\n\t\tPoint[i]=i;\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100919526.png" alt=""></p><h3 id="_4-4-main函数参数" tabindex="-1"><a class="header-anchor" href="#_4-4-main函数参数"><span>4.4 main函数参数</span></a></h3><p><strong>argc</strong>：保存命令行的参数个数，整型 <strong>argv</strong>：指向字符指针数组的指针</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main(int argc,char *argv[])\n{\n\tprintf(&quot;%s\\n&quot;,argv[0]);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100925965.png" alt=""></p><h2 id="_5-函数调用" tabindex="-1"><a class="header-anchor" href="#_5-函数调用"><span>5.函数调用</span></a></h2><p><strong>调用方式</strong>分为函数语句调用，函数表达式调用，函数参数调用</p><h3 id="_5-1-函数语句调用" tabindex="-1"><a class="header-anchor" href="#_5-1-函数语句调用"><span>5.1 函数语句调用</span></a></h3><p><strong>函数语句调用</strong>：把函数的调用作为一个语句</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid Display()\n{\n\tprintf(&quot;仅实现输出一条语句&quot;);\n}\nint main()\n{\n\tDisplay();\n\treturn 0; \n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100935771.png" alt=""></p><h3 id="_5-2-函数表达式调用" tabindex="-1"><a class="header-anchor" href="#_5-2-函数表达式调用"><span>5.2 函数表达式调用</span></a></h3><p><strong>函数表达式调用</strong>：函数出现一个表达式中</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint AddTwoNum(int Num1,int Num2);\nint main()\n{\n\tint Result;\n\tint Num3 = 10;\n\tResult = Num3*AddTwoNum(3,5);\n\tprintf(&quot;结果为：%d\\n&quot;,Result);\n\treturn 0;\n}\nint AddTwoNum(int Num1,int Num2)\n{\n\tint tempResult;\n\ttempResult = Num1 + Num2;\n\treturn tempResult;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307100949623.png" alt=""></p><h3 id="_5-3-函数参数调用" tabindex="-1"><a class="header-anchor" href="#_5-3-函数参数调用"><span>5.3 函数参数调用</span></a></h3><p><strong>函数参数调用</strong>：将函数返回值作为实参，传递到函数中使用</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint AddTwoNum(int Num1,int Num2);\nint main()\n{\n\tint Result;\n\tResult = AddTwoNum(10,AddTwoNum(3,5));\n\tprintf(&quot;结果是：%d\\n&quot;,Result);\n\treturn 0;\n}\nint AddTwoNum(int Num1,int Num2)\n{\n\tint TempResult;\n\tTempResult = Num1 + Num2;\n\treturn TempResult;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307101006226.png" alt=""></p><h3 id="_5-4-嵌套调用" tabindex="-1"><a class="header-anchor" href="#_5-4-嵌套调用"><span>5.4 嵌套调用</span></a></h3><blockquote><p>函数定义相互平行，一个函数体内不能定义另一个函数</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid First();\nvoid Second();\nvoid Third();\nvoid Final();\nint main()\n{\n\tFirst();\n\treturn 0;\n}\nvoid First()\n{\n\tprintf(&quot;这是第一步\\n&quot;);\n\tSecond();\n}\nvoid Second()\n{\n\tprintf(&quot;这是第二步\\n&quot;);\n\tThird();\n}\nvoid Third()\n{\n\tprintf(&quot;这是第三步\\n&quot;);\n\tFinal(); \n}\nvoid Final()\n{\n\tprintf(&quot;这是最后一步&quot;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307121507498.png" alt=""></p><h3 id="_5-5-递归调用" tabindex="-1"><a class="header-anchor" href="#_5-5-递归调用"><span>5.5 递归调用</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nvoid Display(char **a);\nchar* b[]=\n{\n\t&quot;ABC&quot;,&quot;DEF&quot;,&quot;GHI&quot;,&quot;JKL&quot;,&quot;end&quot;\n};\nint main()\n{\n\tDisplay(b);\n\treturn 0;\t\n}\nvoid Display(char **a)\n{\n\tif(*a==&quot;end&quot;)\n\t{\n\t\treturn ;\n\t}\n\telse\n\t{\n\t\tDisplay(a+1);\n\t\tprintf(&quot;%s\\n&quot;,*a);\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307130915222.png" alt=""></p><h2 id="_6-内部函数和外部函数" tabindex="-1"><a class="header-anchor" href="#_6-内部函数和外部函数"><span>6.内部函数和外部函数</span></a></h2><blockquote><p>函数是c语言中最小的单位</p></blockquote><h3 id="_6-1-内部函数" tabindex="-1"><a class="header-anchor" href="#_6-1-内部函数"><span>6.1 内部函数</span></a></h3><p><strong>内部函数</strong>：函数只被所在源文件使用 <code>static 返回值类型 函数名（参数列表）</code></p><blockquote><p>不同源文件中的相同函数名不会冲突</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstatic char* Get(char* p)\n{\n\treturn p;\n}\nstatic void Show(char* p)\n{\n\tprintf(&quot;%s\\n&quot;,p);\n}\nint main()\n{\n\tchar *pString;\n\tpString = Get(&quot;Hello!&quot;);\n\tShow(pString);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714155112.png" alt=""></p><h3 id="_6-2-外部函数" tabindex="-1"><a class="header-anchor" href="#_6-2-外部函数"><span>6.2 外部函数</span></a></h3><p><strong>外部函数</strong>：可以被其他源文件调用的函数</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//文件1\n#include&lt;stdio.h&gt;\nextern char* GetString(char* p);\nextern void Show(char* p);\nint main()\n{\n\tchar* p;\n\tp = GetString(&quot;Hello!&quot;);\n\tShow(p);\n\treturn 0;\n}\n//文件2\nextern char* GetString(char* p)\n{\n\treturn p;\n}\n//文件3\nextern void Show(char* p)\n{\n\tprintf(&quot;%s\\n&quot;,p);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714160037.png" alt=""></p><h2 id="_7-局部变量和全局变量" tabindex="-1"><a class="header-anchor" href="#_7-局部变量和全局变量"><span>7.局部变量和全局变量</span></a></h2><h3 id="_7-1-局部变量" tabindex="-1"><a class="header-anchor" href="#_7-1-局部变量"><span>7.1 局部变量</span></a></h3><p><strong>局部变量</strong>：在函数内部定义的变量，无法被其他函数所引用</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint Num = 1;\n\tprintf(&quot;%d\\n&quot;,Num);\n\tif(Num&gt;0)\n\t{\n\t\tint Num = 2;\n\t\tprintf(&quot;%d\\n&quot;,Num);\n\t\tif(Num&gt;0)\n\t\t{\n\t\t\tint Num = 3;\n\t\t\tprintf(&quot;%d\\n&quot;,Num);\n\t\t}\n\t\tprintf(&quot;%d\\n&quot;,Num);\n\t}\n\tprintf(&quot;%d\\n&quot;,Num);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714154404.png" alt=""></p><blockquote><p>位于不同作用域的变量，可以使用相同的标识符</p></blockquote><h3 id="_7-2-全局变量" tabindex="-1"><a class="header-anchor" href="#_7-2-全局变量"><span>7.2 全局变量</span></a></h3><p><strong>全局变量</strong>：在函数外声明的变量，属于源文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint GlobalPrice = 100;\nvoid Price1();\nvoid Price2();\nvoid Price3();\nvoid ChangePrice();\nint main()\n{\n\tprintf(&quot;原始的价格是%d\\n&quot;,GlobalPrice);\n\tPrice1();\n\tPrice2();\n\tPrice3();\n\tChangePrice();\n\tprintf(&quot;当前的价格是%d\\n&quot;,GlobalPrice);\n\tPrice1();\n\tPrice2();\n\tPrice3();\n}\nvoid Price1()\n{\n\tprintf(&quot;一号价格是：%d\\n&quot;,GlobalPrice);\n}\nvoid Price2()\n{\n\tprintf(&quot;二号价格是：%d\\n&quot;,GlobalPrice);\n}\nvoid Price3()\n{\n\tprintf(&quot;三号价格是：%d\\n&quot;,GlobalPrice);\n}\nvoid ChangePrice()\n{\n\tprintf(&quot;你想要更改的价格是什么？请输入：&quot;);\n\tscanf(&quot;%d&quot;,&amp;GlobalPrice); \n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714162207.png" alt=""></p><h2 id="_8-数学公式" tabindex="-1"><a class="header-anchor" href="#_8-数学公式"><span>8.数学公式</span></a></h2><h3 id="_8-1-绝对值" tabindex="-1"><a class="header-anchor" href="#_8-1-绝对值"><span>8.1 绝对值</span></a></h3><p><strong>abs函数</strong>：求整数绝对值<br><strong>labs函数</strong>：求长整数绝对值<br><strong>fabs函数</strong>：求浮点数绝对值</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\nint main()\n{\n\tint Result1;\n\tint Num1 = -12;\n\tlong Result2;\n\tlong Num2 = -1234567890L;\n\tdouble Result3;\n\tdouble Num3 = -123.0;\n\tResult1 = abs(Num1);\n\tResult2 = labs(Num2);\n\tResult3 = fabs(Num3);\n\tprintf(&quot;数字1为：%d，绝对值为：%d\\n&quot;,Num1,Result1);\n\tprintf(&quot;数字2为：%ld，绝对值为：%ld\\n&quot;,Num2,Result2);\n\tprintf(&quot;数字3为：%lf，绝对值为：%lf\\n&quot;,Num3,Result3);\t\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714171803.png" alt=""></p><h3 id="_8-2-三角函数" tabindex="-1"><a class="header-anchor" href="#_8-2-三角函数"><span>8.2 三角函数</span></a></h3><p><strong>sin函数</strong>：求正弦函数<br><code>double sin(double x);</code><strong>cos函数</strong>：求余弦函数<br><code>double cos(double x);</code><strong>tan函数</strong>：求正切函数<br><code>double tan(double x);</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\n#include&lt;math.h&gt;\nint main()\n{\n\tdouble ResultSin;\n\tdouble ResultCos;\n\tdouble ResultTan;\n\tdouble fXsin = 0.5;\n\tdouble fXcos = 0.5;\n\tdouble fXtan = 0.5;\n\tResultSin = sin(fXsin);\n\tResultCos = cos(fXcos);\n\tResultTan = tan(fXtan);\n\tprintf(&quot;sin%2.1lf的值为：%3.2lf\\n&quot;,fXsin,ResultSin);\n\tprintf(&quot;cos%2.1lf的值为：%3.2lf\\n&quot;,fXcos,ResultCos);\n\tprintf(&quot;cos%2.1lf的值为：%3.2lf\\n&quot;,fXtan,ResultTan);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714174547.png" alt=""></p><h3 id="_8-3-字符检测" tabindex="-1"><a class="header-anchor" href="#_8-3-字符检测"><span>8.3 字符检测</span></a></h3><p><strong>isalpha函数</strong>：检测字母，是字母返回非零<br><code>int isalpha(int ch)</code><strong>isdigit函数</strong>：检测数字，是数字返回非零<br><code>int isdigit(int ch)</code><strong>isalnum函数</strong>：检测数字或字母，是二者之一返回非零<br><code>int isalnum(int ch)</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\n#include&lt;ctype.h&gt;\nvoid Switch(char c);\nint main()\n{\n\tchar CharPut;\n\tchar CharTemp;\n\tprintf(&quot;第一次输入字符：&quot;);\n\tscanf(&quot;%c&quot;,&amp;CharPut);\n\tSwitch(CharPut);\n\tCharTemp = getchar();\n\tprintf(&quot;第二次输入字符：&quot;);\n\tscanf(&quot;%c&quot;,&amp;CharPut);\n\tSwitch(CharPut);\n\tCharTemp = getchar();\n\tprintf(&quot;第三次输入字符：&quot;);\n\tscanf(&quot;%c&quot;,&amp;CharPut);\n\tSwitch(CharPut);\n\treturn 0;\n}\nvoid Switch(char c)\n{\n\tif(isalpha(c))\n\t{\n\t\tprintf(&quot;你输入的是字母%c\\n&quot;,c);\n\t}\n\tif(isdigit(c))\n\t{\n\t\tprintf(&quot;你输入的是数字%c\\n&quot;,c);\n\t}\n\tif(isalnum(c))\n\t{\n\t\tprintf(&quot;你输入的是数字或字母！\\n&quot;); \n\t}\n\telse{\n\t\tprintf(&quot;你输入的既不是数字，也不是字母！\\n&quot;);\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230714180850.png" alt=""></p><h1 id="七、指针" tabindex="-1"><a class="header-anchor" href="#七、指针"><span>七、指针</span></a></h1><h2 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>1.概念</span></a></h2><p>什么是指针？</p><blockquote><p>指针是一个变量，其值为另一个变量的地址，即内存位置的直接地址。保存变量地址的变量。</p></blockquote><p>为什么要使用指针？</p><blockquote><p>生成更高效紧凑的代码</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-1-地址、变量与指针" tabindex="-1"><a class="header-anchor" href="#_1-1-地址、变量与指针"><span>1.1 地址、变量与指针</span></a></h3><p><strong>地址</strong>：内存区中对每个字节的编号 <strong>指针</strong>：内存中的一个地址 <strong>指针变量</strong>：存放另一个变量的地址 <code>类型说明 * 变量名</code></p><blockquote><p>*表示该变量为指针变量<br> 变量名为指针变量名<br> 类型说明为指向的变量类型</p></blockquote><p><strong>指针赋值</strong>：只能赋予地址，不能赋予其他数据 <code>&amp; 变量名</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint a,b;\n\tint *point1,*point2;\n\tprintf(&quot;请输入两个数：&quot;);\n\tscanf(&quot;%d%d&quot;,&amp;a,&amp;b);\n\tpoint1=&amp;a;\n\tpoint2=&amp;b;\n\tprintf(&quot;两个数分别为：%d,%d&quot;,*point1,*point2);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230715085648.png" alt=""></p><p><strong>引用指针变量</strong>：引用指针变量所指向的值</p><p><code>*指针变量</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint main()\n{\n\tint *p,q;\n\tprintf(&quot;请输入：&quot;);\n\tscanf(&quot;%d&quot;,&amp;q);\n\tp = &amp;q;\n\tprintf(&quot;数字为：%d&quot;,*p);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/20230715090327.png" alt=""></p><h3 id="_1-2-指针运算" tabindex="-1"><a class="header-anchor" href="#_1-2-指针运算"><span>1.2 指针运算</span></a></h3><p>&amp;  取值运算符</p><ul><li>指针运算符<br> &amp;*   先指针后取值<br> *&amp;  先取值后指针</li></ul><blockquote><p>指针自增自减按所指向类型的直接长度进行增减</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nmain()\n{\n\tint i;\n\tint *p;\n\tprintf(&quot;请输入一个数字：&quot;);\n\tscanf(&quot;%d&quot;,&amp;i);\n\tp = &amp;i;\n\tprintf(&quot;结果1为：%d\\n&quot;,p);\n\tp++;\n\tprintf(&quot;结果2为：%d\\n&quot;,p);\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://djm-1317856319.cos.ap-shanghai.myqcloud.com/djm-1317856319/202307161037737.png" alt=""></p><h2 id="_2-数组与指针" tabindex="-1"><a class="header-anchor" href="#_2-数组与指针"><span>2.数组与指针</span></a></h2><p><strong>数组指针</strong>：存储数组的首地址</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nmain()\n{\n\tint *p,*q;\n\tint a[5],b[5],i;\n\tp=&amp;a[0];\n\tq=b;\n\tprintf(&quot;请输入第一个数组：\\n&quot;);\n\tfor(i=0;i&lt;5;i++)\n\t{\n\t\tprintf(&quot;a[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;a[i]);\n\t}\n\tprintf(&quot;请输入第二个数组：\\n&quot;); \n\tfor(i=0;i&lt;5;i++)\n\t{\n\t\tprintf(&quot;b[%d]=&quot;,i);\n\t\tscanf(&quot;%d&quot;,&amp;b[i]); \n\t}\n\tprintf(&quot;数组a为：\\n&quot;);\n\tfor(i=0;i&lt;5;i++)\n\t{\n\t\tprintf(&quot;%5d&quot;,*(p+i));\n\t}\n\tprintf(&quot;\\n&quot;);\n\tprintf(&quot;数组b为：\\n&quot;);\n\tfor(i=0;i&lt;5;i++)\n\t{\n\t\tprintf(&quot;%5d&quot;,*(q+i));\n\t}\n\tprintf(&quot;\\n&quot;);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二维数组</strong>：</p><blockquote><p>*(a+i)与a[i]是等价的</p></blockquote><p><strong>字符串指针</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nmain()\n{\n\tchar str1[] = &quot;You are my god&quot;;\n\tchar str2[30];\n\tchar *p,*q;\n\tp=str1;\n\tq=str2;\n\twhile(*p!=&#39;\\0&#39;)\n\t{\n\t\t*q=*p;\n\t\tp++;\n\t\tq++;\n\t}\n\t*q=&#39;\\0&#39;;\n\tprintf(&quot;输出字符串为：\\n&quot;);\n\tputs(str2);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串数组</strong><code>类型名 数组名[数组长度]</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nmain()\n{\n\tint i;\n\tchar *month[]=\n\t{\n\t\t&quot;January&quot;,\n\t\t&quot;February&quot;,\n\t\t&quot;March&quot;,\n\t\t&quot;April&quot;,\n\t\t&quot;May&quot;,\n\t\t&quot;June&quot;,\n\t\t&quot;July&quot;,\n\t\t&quot;August&quot;,\n\t\t&quot;September&quot;,\n\t\t&quot;October&quot;,\n\t\t&quot;November&quot;,\n\t\t&quot;December&quot;\n\t};\n\tfor(i=0;i&lt;12;i++)\n\t{\n\t\tprintf(&quot;%s\\n&quot;,month[i]);\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-双重指针" tabindex="-1"><a class="header-anchor" href="#_3-双重指针"><span>3.双重指针</span></a></h2><p><code>类型标识符 **指针变量名</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nmain()\n{\n\tint i;\n\tchar **p;\n\tchar *month[]=\n\t{\n\t\t&quot;January&quot;,\n\t\t&quot;February&quot;,\n\t\t&quot;March&quot;,\n\t\t&quot;April&quot;,\n\t\t&quot;May&quot;,\n\t\t&quot;June&quot;,\n\t\t&quot;July&quot;,\n\t\t&quot;August&quot;,\n\t\t&quot;September&quot;,\n\t\t&quot;October&quot;,\n\t\t&quot;November&quot;,\n\t\t&quot;December&quot;\n\t};\n\tfor(i=0;i&lt;12;i++)\n\t{\n\t\tp=month+i;\n\t\tprintf(&quot;%s\\n&quot;,*p);\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-函数参数-1" tabindex="-1"><a class="header-anchor" href="#_4-函数参数-1"><span>4.函数参数</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//交换地址 \n#include&lt;stdio.h&gt;\nvoid Swap(int *a,int *b)\n{\n\tint temp ;\n\ttemp=*a;\n\t*a=*b;\n\t*b=temp;\n}\nint main()\n{\n\tint x,y;\n\tint *c,*d;\n\tscanf(&quot;%d%d&quot;,&amp;x,&amp;y);\n\tc=&amp;x;\n\td=&amp;y;\n\tSwap(c,d);\n\tprintf(&quot;%d,%d&quot;,x,y);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//嵌套调用\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//奇数之和\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//冒泡排序\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//字母顺序排序\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//数组元素求和\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-指针函数" tabindex="-1"><a class="header-anchor" href="#_5-指针函数"><span>5.指针函数</span></a></h2><p><code>类型名 *函数名（参数列表）*</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nint per(int a,int b);\nvoid main()\n{\n\tint ilong,width,result;\n\tprintf(&quot;请输入长和宽：&quot;);\t\n\tscanf(&quot;%d%d&quot;,&amp;ilong,&amp;width);\n\tresult=per(ilong,width);\n\tprintf(&quot;周长为：%d&quot;,result);\n}\nint per(int a,int b)\n{\n\treturn (a+b)*2;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-main参数" tabindex="-1"><a class="header-anchor" href="#_6-main参数"><span>6.main参数</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nmain(int argc,char *argv[])\n{\n\tprintf(&quot;命令名：%s\\n&quot;,*argv);\n\tprintf(&quot;参数个数：%d\\n&quot;,argc);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="八、结构体与共用体" tabindex="-1"><a class="header-anchor" href="#八、结构体与共用体"><span>八、结构体与共用体</span></a></h1><h2 id="_1-结构体" tabindex="-1"><a class="header-anchor" href="#_1-结构体"><span>1.结构体</span></a></h2><h3 id="_1-1-定义与声明" tabindex="-1"><a class="header-anchor" href="#_1-1-定义与声明"><span>1.1 定义与声明</span></a></h3><p><strong>结构体</strong>：由不同数据类型组成的有机整体 先声明，再定义</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct 结构体名\n{\n\t成员列表;\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct Product\n{\n\tchar Name[10];    //产品名称\n\tchar Shape[20];   //产品形状\n\tchar Color[10];   //产品颜色\n\tchar Func[20];    //产品功能\n\tint price;        //产品价格\n\tchar Area[20];    //产品产地\n};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明的同时定义</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct 结构体名\n{\n\t成员列表;\n}变量名列表;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct Product\n{\n\tchar Name[10];    //产品名称\n\tchar Shape[20];   //产品形状\n\tchar Color[10];   //产品颜色\n\tchar Func[20];    //产品功能\n\tint price;        //产品价格\n\tchar Area[20];    //产品产地\n}product1,product2;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接定义</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct\n{\n\t成员列表；\n}变量名列表;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct\n{\n\tchar Name[10];    //产品名称\n\tchar Shape[20];   //产品形状\n\tchar Color[10];   //产品颜色\n\tchar Func[20];    //产品功能\n\tint price;        //产品价格\n\tchar Area[20];    //产品产地\n}product1,product2;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不要忘记结构体后的分号<br> 通常将结构体的声明放在头文件中</p></blockquote><h3 id="_1-2-引用" tabindex="-1"><a class="header-anchor" href="#_1-2-引用"><span>1.2 引用</span></a></h3><p><code>结构体变量.成员名</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>product1.Name=&quot;Icebox&quot;;\nproduct2.Price=&quot;2000&quot;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>只能对最低级的结构体成员进行操作，不能直接操作结构体<br> 既能引用结构体成员地址，也能直接引用结构体变量地址</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct Product\n{\n\tchar Name[10];    //产品名称\n\tchar Shape[20];   //产品形状\n\tchar Color[10];   //产品颜色\n\tchar Func[20];    //产品功能\n\tint Price;        //产品价格\n\tchar Area[20];    //产品产地\n};\nint main()\n{\n\tstruct Product product1;\n\tprintf(&quot;请输入产品名称：&quot;);\n\tscanf(&quot;%s&quot;,&amp;product1.Name);\n\tprintf(&quot;请输入产品形状：&quot;);\n\tscanf(&quot;%s&quot;,&amp;product1.Shape);\n\tprintf(&quot;请输入产品颜色：&quot;);\n\tscanf(&quot;%s&quot;,&amp;product1.Color);\n\tprintf(&quot;请输入产品功能：&quot;);\n\tscanf(&quot;%s&quot;,&amp;product1.Func);\n\tprintf(&quot;请输入产品价格：&quot;);\n\tscanf(&quot;%d&quot;,&amp;product1.Price);\n\tprintf(&quot;请输入产品产地：&quot;);\n\tscanf(&quot;%s&quot;,&amp;product1.Area);\n\tprintf(&quot;产品名称：%s\\n&quot;,product1.Name);\n\tprintf(&quot;产品形状：%s\\n&quot;,product1.Shape);\n\tprintf(&quot;产品颜色：%s\\n&quot;,product1.Color);\n\tprintf(&quot;产品功能：%s\\n&quot;,product1.Func);\n\tprintf(&quot;产品价格：%d\\n&quot;,product1.Price);\n\tprintf(&quot;产品产地：%s\\n&quot;,product1.Area);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-初始化" tabindex="-1"><a class="header-anchor" href="#_1-3-初始化"><span>1.3 初始化</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct Student\n{\n\tchar Name[10];\n\tchar Sex;\n\tint Grade;\n} student1={&quot;zhangsan&quot;,&#39;M&#39;,100};\nint main()\n{\n\tstruct Student student2={&quot;lisi&quot;,&#39;W&#39;,99};\n\tprintf(&quot;结构体1中的信息为：\\n&quot;);\n\tprintf(&quot;姓名：%s\\n性别：%c\\n成绩：%d\\n&quot;,student1.Name,student1.Sex,student1.Grade);\n\tprintf(&quot;结构体2中的信息为：\\n&quot;);\n\tprintf(&quot;姓名：%s\\n性别：%c\\n成绩：%d\\n&quot;,student2.Name,student2.Sex,student2.Grade);\t\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-结构体数组" tabindex="-1"><a class="header-anchor" href="#_2-结构体数组"><span>2.结构体数组</span></a></h2><h3 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义"><span>2.1 定义</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct 结构体名\n{\n\t成员列表；\n}数组名；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct Student\n{\n\tchar Name[10];\n\tint Number;\n\tchar Sex;\n\tint Grade;\n}student[5];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-初始化" tabindex="-1"><a class="header-anchor" href="#_2-2-初始化"><span>2.2 初始化</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct 结构体名\n{\n\t成员列表；\n}数组名={初始值列表}；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct Student\n{\n\tchar Name[10];\n\tint Number;\n\tchar Sex;\n\tint Grade;\n}student[5]={{&quot;zhangsan&quot;,000001,&#39;M&#39;,90},\n\t\t\t{&quot;lisi&quot;,000002,&#39;W&#39;,100},\n\t\t\t{&quot;wangwu&quot;,000003,&#39;M&#39;,80},\n\t\t\t{&quot;zhaoliu&quot;,000004,&#39;w&#39;,70},\n\t\t\t{&quot;zhongqi&quot;,000005,&#39;M&#39;,60}};\nint main()\n{\n\tint i;\n\tfor(i=0;i&lt;5;i++)\n\t{\n\t\tprintf(&quot;第%d名学生：\\n&quot;,i+1);\n\t\tprintf(&quot;姓名：%s\\n学号：%d\\n性别：%c\\n成绩：%d\\n&quot;,student[i].Name,student[i].Number,student[i].Sex,student[i].Grade);\n\t\tprintf(&quot;\\n&quot;); \n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-结构体指针" tabindex="-1"><a class="header-anchor" href="#_3-结构体指针"><span>3.结构体指针</span></a></h2><h3 id="_3-1-指向结构体变量" tabindex="-1"><a class="header-anchor" href="#_3-1-指向结构体变量"><span>3.1 指向结构体变量</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p><code>结构体类型 \\*指针名</code></p><h4 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h4><ul><li>使用点运算符引用结构成员 <code>(*pStruct).成员名</code></li><li>使用指向运算符引用结构成员 <code>pStruct-&gt;成员名</code></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nstruct Student\n{\n\tchar Name[10];\n\tint Number;\n\tchar Sex;\n\tint Grade;\n}student;\nint main()\n{\n\tstruct Student *pStruct;\n\tpStruct=&amp;student;\n\tstrcpy(pStruct-&gt;Name,&quot;zhangsan&quot;);\n\tpStruct-&gt;Number=000001;\n\tpStruct-&gt;Sex=&#39;W&#39;;\n\tpStruct-&gt;Grade=100;\n\tprintf(&quot;姓名：%s\\n学号：%d\\n性别：%c\\n成绩：%d\\n&quot;,student.Name,student.Number,student.Sex,student.Grade);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-指向结构体数组" tabindex="-1"><a class="header-anchor" href="#_3-2-指向结构体数组"><span>3.2 指向结构体数组</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct Student\n{\n\tchar Name[10];\n\tint Number;\n\tchar Sex;\n\tint Grade;\n}student[5]={{&quot;zhangsan&quot;,000001,&#39;M&#39;,90},\n\t\t\t{&quot;lisi&quot;,000002,&#39;W&#39;,100},\n\t\t\t{&quot;wangwu&quot;,000003,&#39;M&#39;,80},\n\t\t\t{&quot;zhaoliu&quot;,000004,&#39;w&#39;,70},\n\t\t\t{&quot;zhongqi&quot;,000005,&#39;M&#39;,60}};\nint main()\n{\n\tstruct Student*pStruct;\n\tint i;\n\tpStruct=student;\n\tfor(i=0;i&lt;5;i++,pStruct++)\n\t{\n\t\tprintf(&quot;第%d名学生：\\n&quot;,i+1);\n\t\tprintf(&quot;姓名：%s\\n学号：%d\\n性别：%c\\n成绩：%d\\n&quot;,pStruct-&gt;Name,pStruct-&gt;Number,pStruct-&gt;Sex,pStruct-&gt;Grade);\n\t\tprintf(&quot;\\n&quot;);\n\t}\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-结构体作函数参数" tabindex="-1"><a class="header-anchor" href="#_3-3-结构体作函数参数"><span>3.3 结构体作函数参数</span></a></h3><h4 id="结构体变量" tabindex="-1"><a class="header-anchor" href="#结构体变量"><span>结构体变量</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct Student\n{\n\tchar Name[10];\n\tfloat Score[3];\n}student0={&quot;Zhangsan&quot;,80,85,87.5};\nvoid Display(struct Student student)\n{\n\tprintf(&quot;姓名：%s\\n语文：%.1f\\n数学：%.1f\\n英语：%.1f\\n&quot;,student.Name,student.Score[0],student.Score[1],student.Score[2]);\n\tprintf(&quot;平均分：%.1f&quot;,(student.Score[0]+student.Score[1]+student.Score[2])/3);\n}\nint main()\n{\n\tDisplay(student0);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指向结构体变量指针" tabindex="-1"><a class="header-anchor" href="#指向结构体变量指针"><span>指向结构体变量指针</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct Student\n{\n\tchar Name[10];\n\tfloat Score[3];\n}student={&quot;Zhangsan&quot;,80,85,87.5};\nvoid Display(struct Student *stu)\n{\n\tprintf(&quot;姓名：%s\\n语文：%.1f\\n数学：%.1f\\n英语：%.1f\\n&quot;,stu-&gt;Name,stu-&gt;Score[0],stu-&gt;Score[1],stu-&gt;Score[2]);\n\tstu-&gt;Score[2]=80; \n}\nint main()\n{\n\tstruct Student *pStruct=&amp;student;\n\tDisplay(pStruct);\n\tprintf(&quot;改变后的英语：%.1f&quot;,pStruct-&gt;Score[2]);\n\treturn 0;\n }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结构体变量成员" tabindex="-1"><a class="header-anchor" href="#结构体变量成员"><span>结构体变量成员</span></a></h4><h2 id="_4-包含结构的结构" tabindex="-1"><a class="header-anchor" href="#_4-包含结构的结构"><span>4.包含结构的结构</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include&lt;stdio.h&gt;\nstruct data\n{\n\tint year;\n\tint month;\n\tint day;\n};\nstruct student\n{\n\tchar Name[10];\n\tint num;\n\tchar sex;\n\tstruct data birthday;\n}student={&quot;Zhangsan&quot;,000001,&#39;M&#39;,{1999,12,21}};\nint main()\n{\n\tprintf(&quot;姓名：%s\\n学号：%d\\n性别：%c\\n生日：%d/%d/%d&quot;,student.Name,student.num,student.sex,student.birthday.year,student.birthday.month,student.birthday.day);\n\treturn 0;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-链表" tabindex="-1"><a class="header-anchor" href="#_5-链表"><span>5.链表</span></a></h2><h3 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述"><span>5.1 概述</span></a></h3><p>链表必须利用指针实现</p><h3 id="_5-2-动态链表" tabindex="-1"><a class="header-anchor" href="#_5-2-动态链表"><span>5.2 动态链表</span></a></h3><p><strong>malloc函数</strong>：在内存中动态的分配一块内存空间 <code>void *malloc(int size);</code><strong>calloc函数</strong>：在内存中动态分配n个连续内存空间 <code>void calloc(unsigned n,unsigned size);</code><strong>free函数</strong>：使用指针指向的内存区 <code>void free(void *p);</code></p>',455)],l={},s=(0,e(3744).Z)(l,[["render",function(i,n){return(0,t.wg)(),(0,t.iD)("div",null,d)}]])},4923:(i,n,e)=>{e.r(n),e.d(n,{data:()=>t});const t=JSON.parse('{"key":"v-20049c58","path":"/guide/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B.html","title":"一、入门","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. 程序语言","slug":"_1-程序语言","link":"#_1-程序语言","children":[{"level":3,"title":"1.1 机器语言","slug":"_1-1-机器语言","link":"#_1-1-机器语言","children":[]},{"level":3,"title":"1.2 汇编语言","slug":"_1-2-汇编语言","link":"#_1-2-汇编语言","children":[]},{"level":3,"title":"1.3 高级语言","slug":"_1-3-高级语言","link":"#_1-3-高级语言","children":[]}]},{"level":2,"title":"2. 特点","slug":"_2-特点","link":"#_2-特点","children":[]},{"level":2,"title":"3. 应用","slug":"_3-应用","link":"#_3-应用","children":[]},{"level":2,"title":"4. 集成开发环境","slug":"_4-集成开发环境","link":"#_4-集成开发环境","children":[]},{"level":2,"title":"5. 第一个C程序","slug":"_5-第一个c程序","link":"#_5-第一个c程序","children":[{"level":3,"title":"5.2 calculate.c","slug":"_5-2-calculate-c","link":"#_5-2-calculate-c","children":[]}]},{"level":2,"title":"6. 编译过程","slug":"_6-编译过程","link":"#_6-编译过程","children":[{"level":3,"title":"6.1 编译步骤","slug":"_6-1-编译步骤","link":"#_6-1-编译步骤","children":[]},{"level":3,"title":"6.2 编译指令","slug":"_6-2-编译指令","link":"#_6-2-编译指令","children":[]}]},{"level":2,"title":"5.代码分析","slug":"_5-代码分析","link":"#_5-代码分析","children":[]},{"level":2,"title":"6.编译过程","slug":"_6-编译过程-1","link":"#_6-编译过程-1","children":[{"level":3,"title":"1.标识符","slug":"_1-标识符","link":"#_1-标识符","children":[]},{"level":3,"title":"2.关键字","slug":"_2-关键字","link":"#_2-关键字","children":[]}]},{"level":2,"title":"3.数据类型","slug":"_3-数据类型","link":"#_3-数据类型","children":[]},{"level":2,"title":"4.常量","slug":"_4-常量","link":"#_4-常量","children":[{"level":3,"title":"4.1 整型常量","slug":"_4-1-整型常量","link":"#_4-1-整型常量","children":[]},{"level":3,"title":"4.2 浮点型常量","slug":"_4-2-浮点型常量","link":"#_4-2-浮点型常量","children":[]},{"level":3,"title":"4.3 字符型常量","slug":"_4-3-字符型常量","link":"#_4-3-字符型常量","children":[]},{"level":3,"title":"4.4 转义字符","slug":"_4-4-转义字符","link":"#_4-4-转义字符","children":[]},{"level":3,"title":"4.5 符号常量","slug":"_4-5-符号常量","link":"#_4-5-符号常量","children":[]}]},{"level":2,"title":"5.变量","slug":"_5-变量","link":"#_5-变量","children":[{"level":3,"title":"5.1 整型变量","slug":"_5-1-整型变量","link":"#_5-1-整型变量","children":[]},{"level":3,"title":"5.2 浮点型变量","slug":"_5-2-浮点型变量","link":"#_5-2-浮点型变量","children":[]},{"level":3,"title":"5.3 字符型变量","slug":"_5-3-字符型变量","link":"#_5-3-字符型变量","children":[]}]},{"level":2,"title":"6.变量的存储类别","slug":"_6-变量的存储类别","link":"#_6-变量的存储类别","children":[{"level":3,"title":"6.1 静态存储与动态存储","slug":"_6-1-静态存储与动态存储","link":"#_6-1-静态存储与动态存储","children":[]},{"level":3,"title":"6.2 auto变量","slug":"_6-2-auto变量","link":"#_6-2-auto变量","children":[]},{"level":3,"title":"6.3 staticus变量","slug":"_6-3-staticus变量","link":"#_6-3-staticus变量","children":[]},{"level":3,"title":"6.4 register变量","slug":"_6-4-register变量","link":"#_6-4-register变量","children":[]},{"level":3,"title":"6.5 extern变量","slug":"_6-5-extern变量","link":"#_6-5-extern变量","children":[]}]},{"level":2,"title":"7.混合运算","slug":"_7-混合运算","link":"#_7-混合运算","children":[]},{"level":2,"title":"1.表达式","slug":"_1-表达式","link":"#_1-表达式","children":[]},{"level":2,"title":"2.赋值运算符（=）","slug":"_2-赋值运算符","link":"#_2-赋值运算符","children":[]},{"level":2,"title":"3.算术运算符","slug":"_3-算术运算符","link":"#_3-算术运算符","children":[]},{"level":2,"title":"4.关系运算符","slug":"_4-关系运算符","link":"#_4-关系运算符","children":[]},{"level":2,"title":"5.逻辑运算符","slug":"_5-逻辑运算符","link":"#_5-逻辑运算符","children":[]},{"level":2,"title":"6.位逻辑运算符","slug":"_6-位逻辑运算符","link":"#_6-位逻辑运算符","children":[]},{"level":2,"title":"7.逗号运算符（,）","slug":"_7-逗号运算符","link":"#_7-逗号运算符","children":[]},{"level":2,"title":"8.复合赋值运算符","slug":"_8-复合赋值运算符","link":"#_8-复合赋值运算符","children":[]},{"level":2,"title":"1.输入/输出函数","slug":"_1-输入-输出函数","link":"#_1-输入-输出函数","children":[{"level":3,"title":"1.1 字符输出（putchar）","slug":"_1-1-字符输出-putchar","link":"#_1-1-字符输出-putchar","children":[]},{"level":3,"title":"1.2 字符输入（getchar）","slug":"_1-2-字符输入-getchar","link":"#_1-2-字符输入-getchar","children":[]},{"level":3,"title":"1.3 字符串输出（puts）","slug":"_1-3-字符串输出-puts","link":"#_1-3-字符串输出-puts","children":[]},{"level":3,"title":"1.4 字符串输入（gets）","slug":"_1-4-字符串输入-gets","link":"#_1-4-字符串输入-gets","children":[]},{"level":3,"title":"1.5 格式输出函数（printf）","slug":"_1-5-格式输出函数-printf","link":"#_1-5-格式输出函数-printf","children":[]},{"level":3,"title":"1.6 格式输入函数（scanf）","slug":"_1-6-格式输入函数-scanf","link":"#_1-6-格式输入函数-scanf","children":[]},{"level":3,"title":"1.7 实例","slug":"_1-7-实例","link":"#_1-7-实例","children":[]}]},{"level":2,"title":"2.if语句","slug":"_2-if语句","link":"#_2-if语句","children":[]},{"level":2,"title":"3.if ...else语句","slug":"_3-if-else语句","link":"#_3-if-else语句","children":[]},{"level":2,"title":"4.else if语句","slug":"_4-else-if语句","link":"#_4-else-if语句","children":[]},{"level":2,"title":"5.switch语句","slug":"_5-switch语句","link":"#_5-switch语句","children":[]},{"level":2,"title":"6.while语句","slug":"_6-while语句","link":"#_6-while语句","children":[]},{"level":2,"title":"7./do while语句","slug":"_7-do-while语句","link":"#_7-do-while语句","children":[]},{"level":2,"title":"8.for语句","slug":"_8-for语句","link":"#_8-for语句","children":[]},{"level":2,"title":"9.goto语句","slug":"_9-goto语句","link":"#_9-goto语句","children":[]},{"level":2,"title":"10.break语句","slug":"_10-break语句","link":"#_10-break语句","children":[]},{"level":2,"title":"11.continue语句","slug":"_11-continue语句","link":"#_11-continue语句","children":[]},{"level":2,"title":"1.一维数组","slug":"_1-一维数组","link":"#_1-一维数组","children":[]},{"level":2,"title":"2.二维数组","slug":"_2-二维数组","link":"#_2-二维数组","children":[]},{"level":2,"title":"3.字符数组","slug":"_3-字符数组","link":"#_3-字符数组","children":[]},{"level":2,"title":"4.多维数组","slug":"_4-多维数组","link":"#_4-多维数组","children":[]},{"level":2,"title":"5.排序算法","slug":"_5-排序算法","link":"#_5-排序算法","children":[{"level":3,"title":"5.1 选择排序法","slug":"_5-1-选择排序法","link":"#_5-1-选择排序法","children":[]},{"level":3,"title":"5.2 冒泡排序法","slug":"_5-2-冒泡排序法","link":"#_5-2-冒泡排序法","children":[]},{"level":3,"title":"5.3 交换排序法","slug":"_5-3-交换排序法","link":"#_5-3-交换排序法","children":[]},{"level":3,"title":"5.4 插入排序法","slug":"_5-4-插入排序法","link":"#_5-4-插入排序法","children":[]},{"level":3,"title":"5.5 折半排序法","slug":"_5-5-折半排序法","link":"#_5-5-折半排序法","children":[]}]},{"level":2,"title":"6.字符串处理","slug":"_6-字符串处理","link":"#_6-字符串处理","children":[{"level":3,"title":"6.1 字符串复制（strcpy）","slug":"_6-1-字符串复制-strcpy","link":"#_6-1-字符串复制-strcpy","children":[]},{"level":3,"title":"6.2 字符串连接（strcat）","slug":"_6-2-字符串连接-strcat","link":"#_6-2-字符串连接-strcat","children":[]},{"level":3,"title":"6.3 字符串比较（strcmp）","slug":"_6-3-字符串比较-strcmp","link":"#_6-3-字符串比较-strcmp","children":[]},{"level":3,"title":"6.4 字符串大小写转换（strupr/strlwr）","slug":"_6-4-字符串大小写转换-strupr-strlwr","link":"#_6-4-字符串大小写转换-strupr-strlwr","children":[]},{"level":3,"title":"6.5 字符串长度（strlen）","slug":"_6-5-字符串长度-strlen","link":"#_6-5-字符串长度-strlen","children":[]}]},{"level":2,"title":"7.应用","slug":"_7-应用","link":"#_7-应用","children":[]},{"level":2,"title":"1.函数概述","slug":"_1-函数概述","link":"#_1-函数概述","children":[]},{"level":2,"title":"2.函数定义","slug":"_2-函数定义","link":"#_2-函数定义","children":[]},{"level":2,"title":"3.返回语句","slug":"_3-返回语句","link":"#_3-返回语句","children":[]},{"level":2,"title":"4.函数参数","slug":"_4-函数参数","link":"#_4-函数参数","children":[{"level":3,"title":"4.1 形参与实参","slug":"_4-1-形参与实参","link":"#_4-1-形参与实参","children":[]},{"level":3,"title":"4.2 数组参数","slug":"_4-2-数组参数","link":"#_4-2-数组参数","children":[]},{"level":3,"title":"4.3 指针作参数","slug":"_4-3-指针作参数","link":"#_4-3-指针作参数","children":[]},{"level":3,"title":"4.4 main函数参数","slug":"_4-4-main函数参数","link":"#_4-4-main函数参数","children":[]}]},{"level":2,"title":"5.函数调用","slug":"_5-函数调用","link":"#_5-函数调用","children":[{"level":3,"title":"5.1 函数语句调用","slug":"_5-1-函数语句调用","link":"#_5-1-函数语句调用","children":[]},{"level":3,"title":"5.2 函数表达式调用","slug":"_5-2-函数表达式调用","link":"#_5-2-函数表达式调用","children":[]},{"level":3,"title":"5.3 函数参数调用","slug":"_5-3-函数参数调用","link":"#_5-3-函数参数调用","children":[]},{"level":3,"title":"5.4 嵌套调用","slug":"_5-4-嵌套调用","link":"#_5-4-嵌套调用","children":[]},{"level":3,"title":"5.5 递归调用","slug":"_5-5-递归调用","link":"#_5-5-递归调用","children":[]}]},{"level":2,"title":"6.内部函数和外部函数","slug":"_6-内部函数和外部函数","link":"#_6-内部函数和外部函数","children":[{"level":3,"title":"6.1 内部函数","slug":"_6-1-内部函数","link":"#_6-1-内部函数","children":[]},{"level":3,"title":"6.2 外部函数","slug":"_6-2-外部函数","link":"#_6-2-外部函数","children":[]}]},{"level":2,"title":"7.局部变量和全局变量","slug":"_7-局部变量和全局变量","link":"#_7-局部变量和全局变量","children":[{"level":3,"title":"7.1 局部变量","slug":"_7-1-局部变量","link":"#_7-1-局部变量","children":[]},{"level":3,"title":"7.2 全局变量","slug":"_7-2-全局变量","link":"#_7-2-全局变量","children":[]}]},{"level":2,"title":"8.数学公式","slug":"_8-数学公式","link":"#_8-数学公式","children":[{"level":3,"title":"8.1 绝对值","slug":"_8-1-绝对值","link":"#_8-1-绝对值","children":[]},{"level":3,"title":"8.2 三角函数","slug":"_8-2-三角函数","link":"#_8-2-三角函数","children":[]},{"level":3,"title":"8.3 字符检测","slug":"_8-3-字符检测","link":"#_8-3-字符检测","children":[]}]},{"level":2,"title":"1.概念","slug":"_1-概念","link":"#_1-概念","children":[{"level":3,"title":"1.1 地址、变量与指针","slug":"_1-1-地址、变量与指针","link":"#_1-1-地址、变量与指针","children":[]},{"level":3,"title":"1.2 指针运算","slug":"_1-2-指针运算","link":"#_1-2-指针运算","children":[]}]},{"level":2,"title":"2.数组与指针","slug":"_2-数组与指针","link":"#_2-数组与指针","children":[]},{"level":2,"title":"3.双重指针","slug":"_3-双重指针","link":"#_3-双重指针","children":[]},{"level":2,"title":"4.函数参数","slug":"_4-函数参数-1","link":"#_4-函数参数-1","children":[]},{"level":2,"title":"5.指针函数","slug":"_5-指针函数","link":"#_5-指针函数","children":[]},{"level":2,"title":"6.main参数","slug":"_6-main参数","link":"#_6-main参数","children":[]},{"level":2,"title":"1.结构体","slug":"_1-结构体","link":"#_1-结构体","children":[{"level":3,"title":"1.1 定义与声明","slug":"_1-1-定义与声明","link":"#_1-1-定义与声明","children":[]},{"level":3,"title":"1.2 引用","slug":"_1-2-引用","link":"#_1-2-引用","children":[]},{"level":3,"title":"1.3 初始化","slug":"_1-3-初始化","link":"#_1-3-初始化","children":[]}]},{"level":2,"title":"2.结构体数组","slug":"_2-结构体数组","link":"#_2-结构体数组","children":[{"level":3,"title":"2.1 定义","slug":"_2-1-定义","link":"#_2-1-定义","children":[]},{"level":3,"title":"2.2 初始化","slug":"_2-2-初始化","link":"#_2-2-初始化","children":[]}]},{"level":2,"title":"3.结构体指针","slug":"_3-结构体指针","link":"#_3-结构体指针","children":[{"level":3,"title":"3.1 指向结构体变量","slug":"_3-1-指向结构体变量","link":"#_3-1-指向结构体变量","children":[]},{"level":3,"title":"3.2 指向结构体数组","slug":"_3-2-指向结构体数组","link":"#_3-2-指向结构体数组","children":[]},{"level":3,"title":"3.3 结构体作函数参数","slug":"_3-3-结构体作函数参数","link":"#_3-3-结构体作函数参数","children":[]}]},{"level":2,"title":"4.包含结构的结构","slug":"_4-包含结构的结构","link":"#_4-包含结构的结构","children":[]},{"level":2,"title":"5.链表","slug":"_5-链表","link":"#_5-链表","children":[{"level":3,"title":"5.1 概述","slug":"_5-1-概述","link":"#_5-1-概述","children":[]},{"level":3,"title":"5.2 动态链表","slug":"_5-2-动态链表","link":"#_5-2-动态链表","children":[]}]}],"git":{},"filePathRelative":"guide/C语言/C语言教程.md"}')}}]);