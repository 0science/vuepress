"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[9815],{5198:(o,e,t)=>{t.r(e),t.d(e,{default:()=>s});var p=t(6252);const l=[(0,p.uE)('<p>[[第一章]]计算机组成与体系结构</p><p>[[第二章]]数据库技术</p><p>[[第三章]]知识产权法与标准化</p><p>[[第四章]]数据结构与算法分析设计</p><p>[[第五章]]操作系统</p><p>[[第六章]]编译原理</p><p>[[第七章]]软件工程与结构化开发</p><p>[[第八章]]面向对象技术</p><p>[[第九章]]计算机网络与信息安全</p><h1 id="计算机组成与体系结构" tabindex="-1"><a class="header-anchor" href="#计算机组成与体系结构"><span>计算机组成与体系结构</span></a></h1><h2 id="一、进制的转换" tabindex="-1"><a class="header-anchor" href="#一、进制的转换"><span>一、进制的转换</span></a></h2><h3 id="_1-r进制转十进制" tabindex="-1"><a class="header-anchor" href="#_1-r进制转十进制"><span>1. R进制转十进制</span></a></h3><ul><li><p>二进制转十进制</p></li><li><p>八进制转十进制</p></li><li><p>十六进制转十进制</p></li></ul><blockquote><p>加权展开法</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F2020081413180433.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h3 id="_2-十进制转r进制" tabindex="-1"><a class="header-anchor" href="#_2-十进制转r进制"><span>2. 十进制转R进制</span></a></h3><ul><li><p>十进制转二进制</p></li><li><p>十进制转八进制</p></li><li><p>十进制转十六进制</p></li></ul><blockquote><p>短除法</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200814132138365.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h3 id="_3-二进制转八进制与十六进制" tabindex="-1"><a class="header-anchor" href="#_3-二进制转八进制与十六进制"><span>3. 二进制转八进制与十六进制</span></a></h3><p><strong>二进制转八进制</strong>：每三个二进制位对应一个八进制位</p><p><strong>二进制转十六进制</strong>：每四个二进制位对应一个十六进制位</p><p><strong>八进制转二进制</strong>：每一个八进制位对应三个二进制位</p><p><strong>十六进制转二进制</strong>：每一个十六进制位对应四个二进制位</p><p><strong>八进制转十六进制</strong>：先转二进制，再转十六进制</p><p><strong>十六进制转八进制</strong>：先转二进制，再转八进制</p><blockquote><p>位数不满添0</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200814132620471.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h2 id="二、原码" tabindex="-1"><a class="header-anchor" href="#二、原码"><span>二、原码</span></a></h2><p><strong>原码</strong>：二进制数，最高位是符号位（带符号的情况下），正数0，负数1</p><blockquote><p>原码不能在机器中做直接的计算，要用补码计算</p></blockquote><p><strong>反码</strong>：符号位改变，其余位不变（1变0，0变1）</p><p><strong>补码</strong>：符号位不变，在剩下的位中，从低位开始找到第一个为1的那一位，从这个1开始的右边所有位都不变，左边所有位按位取反即可</p><blockquote><p>正数的原反补三码相同</p></blockquote><p><strong>移码</strong>：补码符号位取反</p><blockquote><p>移码运用少，用于浮点数运算中的阶码</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200814133321460.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><p>机器字长为n时各种码制表示的带符号数的范围</p><p>| 码制 | 定点整数                      | 定点小数                       |</p><p>| ---- | ----------------------------- | ------------------------------ |</p><p>| 原码 | - (2^(n-1)-1) ~ + (2^(n-1)-1) | - (1-2^-(n-1)) ~ +(1-2^-(n-1)) |</p><p>| 反码 | - (2^(n-1)-1) ~ + (2^(n-1)-1) | - (1-2^-(n-1)) ~ +(1-2^-(n-1)) |</p><p>| 补码 | -2^(n-1) ~ +(2^(n-1)-1)       | -1 ~ +(1-2^-(n-1))             |</p><p>| 移码 | -2^(n-1) ~ +(2^(n-1)-1)       | -1 ~ +(1-2^-(n-1))             |</p><blockquote><p>原码和反码表示的范围相同</p></blockquote><blockquote><p>补码和移码表示的范围相同，但比原码、反码表示的范围要多1</p></blockquote><h2 id="三、浮点数运算" tabindex="-1"><a class="header-anchor" href="#三、浮点数运算"><span>三、浮点数运算</span></a></h2><p><strong>阶码</strong>：</p><p><strong>尾数</strong>：</p><p><strong>基数</strong>：</p><p>第一步：对阶（小阶向大阶看齐）</p><p>第二步：对尾数进行计算，<strong>尾数右移，阶码加1，尾数左移，阶码减1</strong></p><p>第三步：舍入处理，结果规格化</p><blockquote><p><strong>数值范围主要由阶码决定</strong></p></blockquote><blockquote><p><strong>数值的精度则由尾数决定</strong></p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200814140111948.png" alt=""></p><h2 id="四、cpu结构" tabindex="-1"><a class="header-anchor" href="#四、cpu结构"><span>四、CPU结构</span></a></h2><p><strong>算术逻辑单元 ALU</strong>：它是运算器的重要组成部件，负责处理数据，实现对数据的算术运算和逻辑运算。</p><p><strong>累加寄存器 AC</strong>：通常简称累加器，它是一个通用寄存器，功能是当运算器的算术逻辑单元执行算术或逻辑运算时，为ALU提供一个工作区。</p><p><strong>数据缓冲寄存器 DR</strong>：作为CPU和内存、外设之间数据传送的中转站，作为CPU和内存、外设之间在操作速度上的缓冲。</p><p><strong>状态条件寄存器 PSW</strong>：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容。</p><p><strong>程序计数器 PC</strong>：用于存放下一条指令的地址。当一条指令被获取后，程序计数器的地址加1，指向下一条指令的地址。</p><p><strong>指令寄存器 IR</strong>：用于存放当前从主存储器读出的正在执行的一条指令。</p><p><strong>地址寄存器 AR</strong>：用于保存当前CPU所访问的内存单元的地址。</p><p><strong>指令译码器 ID</strong>：计算机执行一条指令时，首先分析这条指令的操作码是什么，以决定操作的性质和方法，然后才能控制计算机其他各部件协同完成指令表达的功能，这个分析工作由指令译码器来完成</p><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200814140818283.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h2 id="五、flynn分类法" tabindex="-1"><a class="header-anchor" href="#五、flynn分类法"><span>五、Flynn分类法</span></a></h2><p><strong>指令流</strong>：为机器执行的指令序列</p><p><strong>数据流</strong>：由指令调用的数据序列</p><p>| 体系结构类型             | 结构                                                 | 关键特性                                      | 代表                                       |</p><p>| ------------------------ | ---------------------------------------------------- | --------------------------------------------- | ------------------------------------------ |</p><p>| 单指令流单数据流（SISD） | 控制部分：一个 <br>处 理 器：一个 <br>主存模块：一个 |                                               | 单处理器系统                               |</p><p>| 单指令流多数据流（SIMD） | 控制部分：一个<br>处 理 器：多个<br>主存模块：多个   | 各处理器以异步的<br>形式执行同一条指令        | 并行处理机<br>阵列处理机<br>超级向量处理机 |</p><p>| 多指令流单数据流（MISD） | 控制部分：多个 处 理 器：一个 主存模块：多个         | 被证明不可能，至少是不实际 目前没有，有文献称 | 流水线计算机为此类                         |</p><p>| 多指令流多数据流（MIMD） | 控制部分：多个 处 理 器：多个 主存模块：多个         | 能够实现作业、任务、指令等，各级全面并行      | 多处理机系统                               |</p><blockquote><p>无论是指令流还是数据流，它们都分为两种类型：单、多</p></blockquote><h2 id="六、cisc和risc" tabindex="-1"><a class="header-anchor" href="#六、cisc和risc"><span>六、CISC和RISC</span></a></h2><p>指令系统类型</p><p>指令</p><p>寻址方式</p><p>实现方式</p><p>其他</p><p>CISC（复杂指令集计算机）</p><p>数量多，使用频率差别大</p><p>可变长格式</p><p>支持多种</p><p>微程序控制技术</p><p>研制周期长</p><p>RISC（精简指令集计算机）</p><p>数量少，使用频率接近</p><p>定长格式，大部分为单周期指令</p><p>操作寄存器，只有Load/Store</p><p>操作内存</p><p>支持方式少</p><p>增加了通用寄存器</p><p>硬部线逻辑控制为主</p><p>适合采流水线</p><p>优化编译</p><p>有效支持高级语言</p><h2 id="七、流水线" tabindex="-1"><a class="header-anchor" href="#七、流水线"><span>七、流水线</span></a></h2><h3 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念"><span>1. 基本概念</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815131819155.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h3 id="_2-流水线计算" tabindex="-1"><a class="header-anchor" href="#_2-流水线计算"><span>2. 流水线计算</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815132618603.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>首先，<strong>流水线周期是指在（取指、分析、执行）三个阶段中时间最长的一段</strong>，对应上面的例题，最长的一段时间为2ns，所以流水线周期为2ns。</p></blockquote><blockquote></blockquote><blockquote><p>100条指令全部执行完毕需要的时间为：理论公式：（2+2+1）+（100-1）*2=203ns。</p></blockquote><blockquote></blockquote><blockquote><p>100条指令全部执行完毕需要的时间为：实践公式：（3+100-1）*2=204ns。（公式中的k表示指令被分成了几段）</p></blockquote><h3 id="_3-流水线吞吐率计算" tabindex="-1"><a class="header-anchor" href="#_3-流水线吞吐率计算"><span>3. 流水线吞吐率计算</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815133713798.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>在这个公式中，我们对比5.2中的例题，指令条数为100，流水线执行时间为203ns，所以流水线的吞吐率TP=100/203。</p></blockquote><blockquote></blockquote><blockquote><p>而流水线最大吞吐率是一种理想情况，即TPmax=1/2。（Δt=流水线周期=2ns）</p></blockquote><h3 id="_4-流水线加速比计算" tabindex="-1"><a class="header-anchor" href="#_4-流水线加速比计算"><span>4. 流水线加速比计算</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F2020081513424450.png" alt=""></p><blockquote><p>仍然参照5.2中的例题，如果不使用流水线，采用顺序执行的方法，所花费的时间为：（2+2+1）*100=500ns。而使用流水线的方法，所花费的时间为：（2+2+1）+（100-1）*2=203ns。所以流水线的加速比：S=500/203。</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815134629684.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h2 id="八、层次化存储结构" tabindex="-1"><a class="header-anchor" href="#八、层次化存储结构"><span>八、层次化存储结构</span></a></h2><h3 id="_1-层次结构" tabindex="-1"><a class="header-anchor" href="#_1-层次结构"><span>1. 层次结构</span></a></h3><p><strong>寄存器</strong>：存储速度最快、效率最高，容量小</p><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815135223938.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>速度：Cache（高速缓存）&gt;内存（主存）&gt;外存（辅存）</p></blockquote><h3 id="_2-存储器的分类" tabindex="-1"><a class="header-anchor" href="#_2-存储器的分类"><span>2. 存储器的分类</span></a></h3><h4 id="_2-1-位置分类" tabindex="-1"><a class="header-anchor" href="#_2-1-位置分类"><span>2.1 位置分类</span></a></h4><p><strong>内存</strong>：也称为主存，设在主机内或主板上，用来存放机器当前运行所需要的程序和数据，以便向CPU提供信息。相对于外存，其特点是容量小、速度快。</p><p><strong>外存</strong>：也称为辅存，如磁盘、磁带、光盘和U盘等，用来存放当前不参加运行的大量信息，而在需要时调入内存。</p><h4 id="_2-2-材料分类" tabindex="-1"><a class="header-anchor" href="#_2-2-材料分类"><span>2.2 材料分类</span></a></h4><p><strong>磁存储器</strong>：用磁介质做成，如磁芯、磁泡、磁膜、磁鼓、磁带及磁盘等。</p><p><strong>半导体存储器</strong>：根据所用元件可分为：双极型和MOS型；根据数据是否需要刷新可分为：静态和动态。</p><p><strong>光存储器</strong>：利用光学方法读/写数据的存储器，如光盘。</p><h4 id="_2-3-工作方式分类" tabindex="-1"><a class="header-anchor" href="#_2-3-工作方式分类"><span>2.3 工作方式分类</span></a></h4><p><strong>读/写存储器（RAM）</strong>：既能读取数据也能存入数据的存储器。</p><p><strong>只读存储器</strong>：工作过程中仅能读取的存储器，根据数据的写入方式又可分为：ROM、PROM、EPROM、EEPROM等。</p><p><strong>固定只读存储器（ROM）</strong>：这种存储器是在厂家生产时就写好数据的，其内容只能读出，不能改变。一般用于存放系统程序BIOS和用于微程序控制。</p><p><strong>可编程的只读存储器（PROM）</strong>：其中的内容可以由用户一次性写入，写入后不能再修改。</p><p><strong>可擦除可编程的只读存储器（EPROM）</strong>：其中的内容既可以读出，也可以由用户写入，写入后还可以修改。</p><p><strong>电擦除可编程的只读存储器（EEPROM）</strong>：与EPROM相似，既可以读出，也可以写入，只不过这种存储器采用电擦除的方式进行数据的改写。</p><p><strong>闪速存储器（FM）</strong>：简称闪存，其特性介于EPROM和EEPROM之间，类似于EEPROM。</p><h4 id="_2-4-访问方式分类" tabindex="-1"><a class="header-anchor" href="#_2-4-访问方式分类"><span>2.4 访问方式分类</span></a></h4><p><strong>按地址访问的存储器</strong></p><p><strong>按内容访问的存储器</strong></p><h4 id="_2-5-寻址方式分类" tabindex="-1"><a class="header-anchor" href="#_2-5-寻址方式分类"><span>2.5 寻址方式分类</span></a></h4><blockquote><p>①<strong>随机存储器（RAM）</strong>：这种存储器可对任何存储单元存入或读取数据，访问任何一个存储单元所需的时间是相同的。</p></blockquote><blockquote></blockquote><blockquote><p>②<strong>顺序存储器（SAM）</strong>：访问数据所需要的时间与数据所在的存储位置相关，磁带是典型的顺序存储器。</p></blockquote><blockquote></blockquote><blockquote><p>③<strong>直接存储器（DAM）</strong>：介于随机存取和顺序存取之间的一种寻址方式。磁盘是一种直接存储器。</p></blockquote><h3 id="_3-主存" tabindex="-1"><a class="header-anchor" href="#_3-主存"><span>3. 主存</span></a></h3><h4 id="_3-1-分类" tabindex="-1"><a class="header-anchor" href="#_3-1-分类"><span>3.1 分类</span></a></h4><p><strong>随机存取存储器（RAM）</strong></p><p><strong>只读存储器（ROM）</strong></p><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815145026968.png" alt=""></p><blockquote><p>内存是属于RAM的，一旦断电之后，内存中的所有数据都将被清除掉，无法进行保存</p></blockquote><blockquote><p>ROM在断电之后，仍然可以存储信息内容</p></blockquote><h4 id="_3-2-编址" tabindex="-1"><a class="header-anchor" href="#_3-2-编址"><span>3.2 编址</span></a></h4><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815150336277.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>解题思路：计算占用空间-&gt;十六进制转十进制-&gt;-&gt;-&gt;</p></blockquote><blockquote><p>对于上面这个例题，我们首先看第一空，内存地址从AC000H到C7FFFH，共有多少K个地址单元，那么对这两个十六进制数进行相减、再加1即可，第5位：F-0=F；第四位：F-0=F；第三位：F-0=F；第二位：7-C，因为C=12，不够减，所以向高位借一位，此时第四位应该是：7+16-C=B（11，因为是<strong>十六进制，所以每借一位加16</strong>）；第一位：因为被借走了一位，所以C-1=B，B-A=1；所得结果是：1BFFFH，再加1，即：1C000H（将其转换成K单位，要对结果除以1024）。将其转为十进制：（0×16^0 + 0×16^1 + 0×16^2 + C×16^3 + 1×16^4）/1024=112K。</p></blockquote><blockquote></blockquote><blockquote><p>第二空：总容量为112K×16bit，需要28片存储器芯片，每片芯片有16K个存储单元，问该芯片每个存储单元存储多少位？</p></blockquote><blockquote></blockquote><blockquote><p>也就是说：（112K×16bit）/（28×16K×a）=1，比值为1是因为我们使用这些芯片组成固定的空间，16和16约掉，K和K约掉，所以112/28a=1，即解得a=4。</p></blockquote><h3 id="_4-相联存储器" tabindex="-1"><a class="header-anchor" href="#_4-相联存储器"><span>4. 相联存储器</span></a></h3><blockquote><p>相联存储器是一种按内容访问的存储器，其工作原理就是把数据或数据的某一部分作为关键字，按顺序写入信息，读出时并行的将该关键字与存储器中的每一单元进行比较，找出存储器中所有关键字相同的数据字，特别适合于信息的检索和更新。</p></blockquote><h3 id="_5-cache-高速缓存" tabindex="-1"><a class="header-anchor" href="#_5-cache-高速缓存"><span>5. Cache（高速缓存）</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815142623725.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>高速缓存中的地址映像方法：直接映像、全相联映像、组相联映像。</p></blockquote><blockquote></blockquote><blockquote><p>①<strong>直接映像</strong>：指主存的块与Cache块的对应关系是固定的。优点是地址变换简单，缺点是灵活性差、Cache块冲突率高。</p></blockquote><blockquote></blockquote><blockquote><p>②<strong>全相联映像</strong>：允许主存的任一块可以调入Cache存储器的任何一个块的空间中。优点是Cache块冲突率低、灵活性好，缺点是访问速度慢、地址变换较复杂、成本太高。</p></blockquote><blockquote></blockquote><blockquote><p>③<strong>组相联映像</strong>：是前两种方式的折衷方案，即组采用直接映像方式、块采用全相联映像方式。</p></blockquote><h3 id="_6-局部性原理" tabindex="-1"><a class="header-anchor" href="#_6-局部性原理"><span>6.局部性原理</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200815143315398.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p><strong>时间局部性</strong>：指如果程序中的某条指令一旦被执行，则不久的将来该指令可能再次被执行。</p></blockquote><blockquote></blockquote><blockquote><p><strong>空间局部性</strong>：指一旦程序访问了某个存储单元，则在不久的将来，其附近的存储单元也最有可能被访问。</p></blockquote><h3 id="_7-磁盘工作原理" tabindex="-1"><a class="header-anchor" href="#_7-磁盘工作原理"><span>7.磁盘工作原理</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816111248591.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816111733106.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816113246280.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>我们来看上面这道例题，磁盘的旋转周期为33ms，表示旋转一圈耗时33ms，一共有11个记录，可以理解为读取1个记录消耗的时间为3ms。</p></blockquote><blockquote></blockquote><blockquote><p>若采用单缓冲区顺序处理（如上图中的大圈），当我们把R0读取单缓冲区时，此时磁头跑到了R1的起始位置，但是此时是不能读取R1的，因为R0占用着缓冲区（还未处理完），所以新的记录是进不来的。当我们处理完缓冲区中的R0之后，花费了3ms，此时磁头已经跑到了R2的起始位置，但是我们接下来想要处理的应该是R1，所以这个时候磁头会一直转动，直到转过一圈，再次跑到R1的起始位置时，才可以处理R1。所以我们处理一个记录R0，一共耗时为：一个记录+一圈，也就是3+33=36ms。从R0到R9都是同样的道理，所以共耗时：36*10=360ms，而对于R10，我们就可以直接读取并处理，耗时为6ms，所以总共耗时为360+6=366ms。</p></blockquote><blockquote></blockquote><blockquote><p>若对信息存储进行优化分布（如上图中的小圈），先看大圈，我们处理R0的时候，磁头跑到了R2，此时我们将R2假设为R1；而处理完R1之后，磁头跑到了R4，此时我们将R4假设为R2，以此类推，就得到了上图中的小圈。这样下来，就没有任何的时间浪费，那么读取和处理分别耗时3ms，也就是处理完一个记录耗时3+3=6ms，一共11个记录，总共耗时6*11=66ms。</p></blockquote><hr><h2 id="九、总线结构" tabindex="-1"><a class="header-anchor" href="#九、总线结构"><span>九、总线结构</span></a></h2><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816115240831.png" alt=""></p><blockquote><p>微机中的总线分为数据总线、地址总线、控制总线。</p></blockquote><blockquote></blockquote><blockquote><p>①<strong>数据总线（DB）</strong>：用来传送数据信息，是双向的。CPU既可以通过DB从内存或输入设备读入数据，也可以通过DB将内部数据送至内存或输出设备。DB的宽度决定了CPU和计算机其他设备之间每次交换数据的位数。</p></blockquote><blockquote></blockquote><blockquote><p>②<strong>地址总线（AB）</strong>：用于传送CPU发出的地址信息，是单向的。传送地址总线的目的是指明与CPU交换信息的内存单元或I/O设备，地址总线的宽度决定了CPU的最大寻址能力。</p></blockquote><blockquote></blockquote><blockquote><p>③<strong>控制总线（CB）</strong>：用来传送控制信号、时序信号和状态信息等，双向线表示。其中有的信号是CPU向内存或外部设备发出的信息，有的信号是内存或外部设备向CPU发出的信息。CB中的每一条线的信息传送方向是单方向且确定的，但CB作为一个整体则是双向的。</p></blockquote><h2 id="十、系统可靠性分析" tabindex="-1"><a class="header-anchor" href="#十、系统可靠性分析"><span>十、系统可靠性分析</span></a></h2><blockquote><p>系统中的各个子系统的可靠性均采用R1、R2、......、Rn表示；失效率均采用λ1、λ2、......、λn表示。</p></blockquote><h3 id="_10-1-串联系统的可靠性-r-与失效率-λ" tabindex="-1"><a class="header-anchor" href="#_10-1-串联系统的可靠性-r-与失效率-λ"><span>10.1 串联系统的可靠性（R）与失效率（λ）</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816120455340.png" alt=""></p><h3 id="_10-2-并联系统的可靠性-r-与失效率-μ" tabindex="-1"><a class="header-anchor" href="#_10-2-并联系统的可靠性-r-与失效率-μ"><span>10.2 并联系统的可靠性（R）与失效率（μ）</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816120719139.png" alt=""></p><h3 id="_10-3-简单的举例" tabindex="-1"><a class="header-anchor" href="#_10-3-简单的举例"><span>10.3 简单的举例</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816121207473.png" alt=""></p><h2 id="十一、差错控制" tabindex="-1"><a class="header-anchor" href="#十一、差错控制"><span>十一、差错控制</span></a></h2><h3 id="_11-1-校验码的基本概念" tabindex="-1"><a class="header-anchor" href="#_11-1-校验码的基本概念"><span>11.1 校验码的基本概念</span></a></h3><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816130318669.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h3 id="_11-2-循环校验码-crc" tabindex="-1"><a class="header-anchor" href="#_11-2-循环校验码-crc"><span>11.2 循环校验码（CRC）</span></a></h3><blockquote><p>循环冗余校验码（CRC）广泛应用于数据通信领域和磁介质存储系统中。它利用生成多项式为k个数据位产生r个校验位来进行编码，其编码长度为k+r。</p></blockquote><blockquote></blockquote><blockquote><p>循环冗余校验码是由两部分组成的，左边为信息码（数据），右边为校验码。若信息码占k位，则校验码就占n-k位。其中，n为CRC码的字长，所以又称为（n，k）码。校验码是由信息码产生的，校验码位数越多，该代码的校验能力就越强。在求CRC编码时，采用的是模2运算。</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816131726764.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><h3 id="_11-3-奇偶校验码-pc" tabindex="-1"><a class="header-anchor" href="#_11-3-奇偶校验码-pc"><span>11.3 奇偶校验码（PC）</span></a></h3><blockquote><p>奇偶校验是一种简单有效的校验方法（<strong>可以检错，不能纠错</strong>）。这种方法通过在编码中增加一位校验位来使编码中1的个数为奇数（奇校验）或者为偶数（偶校验），从而使码距变为2。</p></blockquote><blockquote></blockquote><blockquote><p>对于奇校验，它可以检测代码中奇数位出错的编码，但不能发现偶数位出错的情况，即当合法编码中的奇数位发生了错误时，编码中的1变成0或0变成1，则该编码中1的个数的奇偶性就发生了变化，从而可以发现错误。</p></blockquote><blockquote></blockquote><blockquote><p>奇校验：被传输的有效数据中“1”的个数是奇数个，校验位填“0”，否则填“1”。</p></blockquote><blockquote></blockquote><blockquote><p>偶校验：被传输的有效数据中“1”的个数是偶数个，校验位填“0”，否则填“1”。</p></blockquote><blockquote></blockquote><blockquote><p>例如：奇校验 1000110（0），采用奇校验，“1”的个数为奇数个，所以校验位填“0”。</p></blockquote><blockquote></blockquote><blockquote><p>偶校验 1000110（1），采用偶检验，“1”的个数为奇数个，所以校验位填“1”。</p></blockquote><h3 id="_11-4-海明校验码-hc" tabindex="-1"><a class="header-anchor" href="#_11-4-海明校验码-hc"><span>11.4 海明校验码（HC）</span></a></h3><blockquote><p>海明码的构成方法是在数据位之间的特定位置上插入k个校验位，通过扩大码距来实现检错和纠错（<strong>可以检错和纠错</strong>）。</p></blockquote><blockquote></blockquote><blockquote><p>设数据位是n位，校验位是k位，则n和k必须满足：<strong>2^k - 1 ≥ n + k</strong>。</p></blockquote><p><img src="https://cubox.pro/c/filters:no_upscale()?valid=true&amp;imageUrl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20200816132855891.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzgyMzgwOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70" alt=""></p><blockquote><p>我们看上面这个例题，对于信息1011的海明码，我们要确定校验位，此时数据位为n=4，首先采用公式 2^k - 1 ≥ n + k，解得校验位k=3，分别存放在：2^0=1、2^1=2、2^2=4这三个位置。而剩下空出来的位置则对应补上数据位，即：第三位为I1，第五位为I2，第六位为I3，第七位为I4。（如果校验位更多，则第八位为r3：2^3=8）</p></blockquote><blockquote></blockquote><blockquote><p>因为I4占据第七位：7=2^2+2^1+2^0；I3占据第六位：6=2^2+2^1；I2占据第五位：5=2^2+2^0；I1占据第三位：3=2^1+2^0。我们找出这几个式子中指数的规律：👇👇👇</p></blockquote><blockquote></blockquote><blockquote><p>校验位r2对应2^2，而7、6、5分别包含2^2，这三位分别对应数据位I4、I3、I2，则：r2=I4 异或 I3 异或 I2，而数据位I4=1，I3=0，I2=1，得异或结果为r2=0。</p></blockquote><blockquote></blockquote><blockquote><p>校验位r1对应2^1，而7、6、3分别包含2^1，这三位分别对应数据位I4、I3、I1，则：r1=I4 异或 I3 异或 I1，而数据位I4=1，I3=0，I1=1，得异或结果为r1=0。</p></blockquote><blockquote></blockquote><blockquote><p>校验位r0对应2^0，而7、5、3分别包含2^0，这三位分别对应数据位I4、I2、I1，则：r0=I4 异或 I2 异或 I1，而数据位I4=1，I2=1，I1=1，得异或结果为r0=1。</p></blockquote><blockquote></blockquote><blockquote><p>所得最终的结果为：I4=1，I3=0，I2=1，r2=0，I1=1，r1=0，r0=1，收到的信息为：1010101。</p></blockquote><hr><h2 id="十二、输入输出技术" tabindex="-1"><a class="header-anchor" href="#十二、输入输出技术"><span>十二、输入输出技术</span></a></h2><h3 id="_12-1-直接程序控制" tabindex="-1"><a class="header-anchor" href="#_12-1-直接程序控制"><span>12.1 直接程序控制</span></a></h3><blockquote><p>直接程序控制是指外设数据的输入/输出过程是在CPU执行程序的控制下完成的。这种方法分为：无条件传送和程序查询方式两种情况。</p></blockquote><blockquote></blockquote><blockquote><p>①<strong>无条件传送</strong>：在此情况下，外设总是准备好的，它可以无条件的随时接收CPU发来的输出数据，也能够无条件的随时向CPU提供需要输入的数据。</p></blockquote><blockquote></blockquote><blockquote><p>②<strong>程序查询方式</strong>：在这种方式下，利用查询方式进行输入/输出，就是通过CPU执行程序来查询外设的状态，判断外设是否准备好接收数据或准备好了向CPU输入的数据。</p></blockquote><h3 id="_12-2-中断方式" tabindex="-1"><a class="header-anchor" href="#_12-2-中断方式"><span>12.2 中断方式</span></a></h3><blockquote><p>对于程序控制I/O的方法，其主要的缺点在于CPU必须等待I/O系统完成数据的传输任务，整个系统的性能严重下降。</p></blockquote><blockquote></blockquote><blockquote><p>利用中断方式完成数据的输入/输出过程为：当I/O系统与外设交换数据时，CPU无需等待也不必去查询I/O的状态，而可以抽身出来处理其他任务。当I/O系统准备好了以后，则发出中断请求信号通知CPU，CPU接到中断请求信号后，保存正在执行程序的现场，转入I/O中断服务程序的执行，完成与I/O系统的数据交换，然后再返回被中断的程序继续执行。</p></blockquote><blockquote></blockquote><blockquote><p>与程序控制方式相比，中断方式因为CPU无需等待而提高了效率。</p></blockquote><h3 id="_12-3-直接存储器存取方式-dma" tabindex="-1"><a class="header-anchor" href="#_12-3-直接存储器存取方式-dma"><span>12.3 直接存储器存取方式（DMA）</span></a></h3><blockquote><p>在计算机与外设交换数据的过程中，无论是程序控制方式，还是中断方式，都需要CPU通过执行程序来实现，这就限制了数据的传送速度。为进一步提高相应的速度，我们引入了DMA。</p></blockquote><blockquote></blockquote><blockquote><p>DMA是指数据在内存与I/O设备间（通俗的说，就是主存与外设）的直接成块传送，即在内存与I/O设备间传送一个数据块的过程，不需要CPU的任何干涉，只需要CPU在过程开始时启动、在过程结束时处理，实际操作全部由DMA硬件自动执行完成，CPU在此传送过程中可以去做别的事情。</p></blockquote><h3 id="_12-4-输入-输出处理机-iop" tabindex="-1"><a class="header-anchor" href="#_12-4-输入-输出处理机-iop"><span>12.4 输入/输出处理机（IOP）</span></a></h3><blockquote><p>DMA方式的出现减轻了CPU对I/O操作的控制，使得CPU的效率显著提高。而通道方式的出现则进一步提高了CPU的效率。通道是一个具有特殊功能的处理器，又称为输入输出处理器（IOP），它分担了CPU的一部分功能，可以实现对外围设备的统一管理，完成外围设备与主存之间的数据传送。</p></blockquote><blockquote></blockquote><blockquote><p>通道方式大大提高了CPU的工作效率，然而这种效率的提高是以增加更多的硬件为代价的。</p></blockquote>',264)],a={},s=(0,t(3744).Z)(a,[["render",function(o,e){return(0,p.wg)(),(0,p.iD)("div",null,l)}]])},8228:(o,e,t)=>{t.r(e),t.d(e,{data:()=>p});const p=JSON.parse('{"key":"v-5a56c5b6","path":"/guide/%E8%BD%AF%E8%80%83/%E8%BD%AF%E8%80%83.html","title":"计算机组成与体系结构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、进制的转换","slug":"一、进制的转换","link":"#一、进制的转换","children":[{"level":3,"title":"1. R进制转十进制","slug":"_1-r进制转十进制","link":"#_1-r进制转十进制","children":[]},{"level":3,"title":"2. 十进制转R进制","slug":"_2-十进制转r进制","link":"#_2-十进制转r进制","children":[]},{"level":3,"title":"3. 二进制转八进制与十六进制","slug":"_3-二进制转八进制与十六进制","link":"#_3-二进制转八进制与十六进制","children":[]}]},{"level":2,"title":"二、原码","slug":"二、原码","link":"#二、原码","children":[]},{"level":2,"title":"三、浮点数运算","slug":"三、浮点数运算","link":"#三、浮点数运算","children":[]},{"level":2,"title":"四、CPU结构","slug":"四、cpu结构","link":"#四、cpu结构","children":[]},{"level":2,"title":"五、Flynn分类法","slug":"五、flynn分类法","link":"#五、flynn分类法","children":[]},{"level":2,"title":"六、CISC和RISC","slug":"六、cisc和risc","link":"#六、cisc和risc","children":[]},{"level":2,"title":"七、流水线","slug":"七、流水线","link":"#七、流水线","children":[{"level":3,"title":"1. 基本概念","slug":"_1-基本概念","link":"#_1-基本概念","children":[]},{"level":3,"title":"2. 流水线计算","slug":"_2-流水线计算","link":"#_2-流水线计算","children":[]},{"level":3,"title":"3. 流水线吞吐率计算","slug":"_3-流水线吞吐率计算","link":"#_3-流水线吞吐率计算","children":[]},{"level":3,"title":"4. 流水线加速比计算","slug":"_4-流水线加速比计算","link":"#_4-流水线加速比计算","children":[]}]},{"level":2,"title":"八、层次化存储结构","slug":"八、层次化存储结构","link":"#八、层次化存储结构","children":[{"level":3,"title":"1. 层次结构","slug":"_1-层次结构","link":"#_1-层次结构","children":[]},{"level":3,"title":"2. 存储器的分类","slug":"_2-存储器的分类","link":"#_2-存储器的分类","children":[]},{"level":3,"title":"3. 主存","slug":"_3-主存","link":"#_3-主存","children":[]},{"level":3,"title":"4. 相联存储器","slug":"_4-相联存储器","link":"#_4-相联存储器","children":[]},{"level":3,"title":"5. Cache（高速缓存）","slug":"_5-cache-高速缓存","link":"#_5-cache-高速缓存","children":[]},{"level":3,"title":"6.局部性原理","slug":"_6-局部性原理","link":"#_6-局部性原理","children":[]},{"level":3,"title":"7.磁盘工作原理","slug":"_7-磁盘工作原理","link":"#_7-磁盘工作原理","children":[]}]},{"level":2,"title":"九、总线结构","slug":"九、总线结构","link":"#九、总线结构","children":[]},{"level":2,"title":"十、系统可靠性分析","slug":"十、系统可靠性分析","link":"#十、系统可靠性分析","children":[{"level":3,"title":"10.1 串联系统的可靠性（R）与失效率（λ）","slug":"_10-1-串联系统的可靠性-r-与失效率-λ","link":"#_10-1-串联系统的可靠性-r-与失效率-λ","children":[]},{"level":3,"title":"10.2 并联系统的可靠性（R）与失效率（μ）","slug":"_10-2-并联系统的可靠性-r-与失效率-μ","link":"#_10-2-并联系统的可靠性-r-与失效率-μ","children":[]},{"level":3,"title":"10.3 简单的举例","slug":"_10-3-简单的举例","link":"#_10-3-简单的举例","children":[]}]},{"level":2,"title":"十一、差错控制","slug":"十一、差错控制","link":"#十一、差错控制","children":[{"level":3,"title":"11.1 校验码的基本概念","slug":"_11-1-校验码的基本概念","link":"#_11-1-校验码的基本概念","children":[]},{"level":3,"title":"11.2 循环校验码（CRC）","slug":"_11-2-循环校验码-crc","link":"#_11-2-循环校验码-crc","children":[]},{"level":3,"title":"11.3 奇偶校验码（PC）","slug":"_11-3-奇偶校验码-pc","link":"#_11-3-奇偶校验码-pc","children":[]},{"level":3,"title":"11.4 海明校验码（HC）","slug":"_11-4-海明校验码-hc","link":"#_11-4-海明校验码-hc","children":[]}]},{"level":2,"title":"十二、输入输出技术","slug":"十二、输入输出技术","link":"#十二、输入输出技术","children":[{"level":3,"title":"12.1 直接程序控制","slug":"_12-1-直接程序控制","link":"#_12-1-直接程序控制","children":[]},{"level":3,"title":"12.2 中断方式","slug":"_12-2-中断方式","link":"#_12-2-中断方式","children":[]},{"level":3,"title":"12.3 直接存储器存取方式（DMA）","slug":"_12-3-直接存储器存取方式-dma","link":"#_12-3-直接存储器存取方式-dma","children":[]},{"level":3,"title":"12.4 输入/输出处理机（IOP）","slug":"_12-4-输入-输出处理机-iop","link":"#_12-4-输入-输出处理机-iop","children":[]}]}],"git":{},"filePathRelative":"guide/软考/软考.md"}')}}]);