"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[36],{1333:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var d=t(6252);const i=[(0,d.uE)('<h1 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h1><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><p>封装性：隐藏细节，开放接口 继承性：继承另一个对象的成员 多态性：同一操作对不同对象，产生的结果不同</p><h3 id="定义对象" tabindex="-1"><a class="header-anchor" href="#定义对象"><span>定义对象</span></a></h3><p><code>var obj = {}</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj = obj{\n    name:&quot;zhangsan&quot;,\n    age:18,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{\n    &quot;name&quot;:&quot;zhangsan&quot;,\n    &quot;age&quot;:18\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问对象成员" tabindex="-1"><a class="header-anchor" href="#访问对象成员"><span>访问对象成员</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj = {\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nconsole.log(obj.name)\nvar introduce = function(){\n    console.log(&quot;my name&quot;)\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象"><span>遍历对象</span></a></h3><p>for ··· in</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj ={\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nfor(var k in obj){\n    console.log(k,obj[k])\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象是否存在" tabindex="-1"><a class="header-anchor" href="#对象是否存在"><span>对象是否存在</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj= {\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nconsole.log(&#39;name&#39; in obj)\nconsole.log(&#39;sex&#39; in obj)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝"><span>深浅拷贝</span></a></h3><p>浅拷贝：复制后相同,改一个变两个，节省内存</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj ={\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nvar obj2 = obj\nobj2.name = &quot;lisi&quot;\nconsole.log(obj === obj2)\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深拷贝：复制后不同，改一个不影响另一个</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj ={\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nvar obj2 = function(obj){\n    for(i in obj){\n        obj2[i] = obj[i]\n    }\n}\nobj2.name = &quot;lisi&quot;\nconsole.log(obj === obj2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>构造函数：创建相同特征的对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function factory(name,age){\n    var o = {}\n    o.name = name\n    o.age = age\n}\no1 = factory(&quot;lisi&quot;,24)\no2 = factory(&quot;wangwu&quot;,25)\nconsole.log(o1)\nconsole.log(o2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类：</p><p>实例化：通过类创建对象的过程</p><p>内置构造函数：</p><p><code>{}.constructor</code></p><p>[native code]表示是原生代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj = new Object()\nvar str = new String(&quot;123&quot;)\nconsole.log(obj.constructor)\nconsole.log(str.constructor)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义构造函数" tabindex="-1"><a class="header-anchor" href="#自定义构造函数"><span>自定义构造函数</span></a></h3><ol><li>帕斯卡命名法：首写字母大写</li><li>使用this指向实例化对象</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function Person(name,age){\n    this.name = name;\n    this.age = age;\n    this.sayHello = function(){\n        console.log(&quot;Hello,my name is &quot;+ this.name)\n    }\n}\nvar p1 = new Person(&quot;zhangsan&quot;,18)\nvar p2 = new Person(&quot;lisi&quot;,20)\np1.sayHello()\nconsole.log(p1)\np2.sayHello()\nconsole.log(p2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class关键字" tabindex="-1"><a class="header-anchor" href="#class关键字"><span>class关键字</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>class Person{\n    constructor(name,age){\n        this.name = name\n        this.age = age\n    }\n    introduce(){\n        console.log(&#39;我是&#39; + this.name + &#39;,今年&#39;+this.age + &#39;岁&#39;)\n    }\n}\nvar p = new Person(&quot;zhangsan&quot;,18)\np.introduce()\nconsole.log(p)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="私有成员" tabindex="-1"><a class="header-anchor" href="#私有成员"><span>私有成员</span></a></h3><p>私有成员:构造函数中用var定义的成员</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function Person(){\n    var name = &quot;zhangsan&quot;\n    this.getName = function(){\n        return name\n    }\n}\nvar p = new Person()\nconsole.log(p.name)\nconsole.log(p.getName())\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="return-关键字" tabindex="-1"><a class="header-anchor" href="#return-关键字"><span>return 关键字</span></a></h3><p>return + 基本类型 = 数据 return +引用类型 = 对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//返回基本数据类型\nfunction Person(){\n    obj =this\n    return 123\n}\nvar obj,p= new Person()\nconsole.log(obj === p)\n//返回引用数据类型\nfunction Person2(){\n    obj2 = this\n    return {}\n}\nvar obj2,p2 = new Person2()\nconsole.log(obj2 === p2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h3><ol><li>指向构造函数内部对象</li><li>直接调用函数调用全局对象</li><li>对象的方法，指向对象</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function obj(){\n    return this\n}\nvar o ={\n    name :&quot;zhangsan&quot;,\n    function:obj\n}\nconsole.log(obj() == window)\nconsole.log(o.function() === o)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改this指向" tabindex="-1"><a class="header-anchor" href="#更改this指向"><span>更改this指向</span></a></h3><p>apply() call()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function obj(){\n    console.log(this.name)\n}\nobj.apply({name:&#39;张三&#39;})\nobj.call({name:&#39;李四&#39;})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string对象" tabindex="-1"><a class="header-anchor" href="#string对象"><span>String对象</span></a></h3><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>length</td><td>字符串长度</td></tr><tr><td>charAt()</td><td>从0开始获取字符位置</td></tr><tr><td>indexOf()</td><td>获取字符首次出现位置</td></tr><tr><td>lastIndexOf()</td><td>获取字符最后出现位置</td></tr><tr><td>substr()</td><td>按位置截取字符串</td></tr><tr><td>substring()</td><td>按长度截取字符串</td></tr><tr><td>toLowerCase()</td><td>转小写</td></tr><tr><td>toUpperCase()</td><td>转大写</td></tr><tr><td>trim()</td><td>去除首尾空格</td></tr><tr><td>replace()</td><td>替换字符串</td></tr><tr><td>split()</td><td>分割字符串</td></tr></tbody></table><h2 id="number对象" tabindex="-1"><a class="header-anchor" href="#number对象"><span>Number对象</span></a></h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>MAX_VALUE</td><td>最大值</td></tr><tr><td>MIN_VALUE</td><td>最小值</td></tr><tr><td>toFixed()</td><td>保留小数位</td></tr></tbody></table><h2 id="date方法" tabindex="-1"><a class="header-anchor" href="#date方法"><span>date方法</span></a></h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取年份</td></tr><tr><td>getMonth()</td><td>获取月份</td></tr><tr><td>getDate()</td><td>获取日期</td></tr><tr><td>getDay()</td><td>获取星期</td></tr><tr><td>getHours()</td><td>获取小时</td></tr><tr><td>getMinutes()</td><td>获取分钟</td></tr><tr><td>getSeconds()</td><td>获取秒</td></tr><tr><td>getTime()</td><td>获取时间戳</td></tr><tr><td>setFullYear()</td><td>设置年份</td></tr><tr><td>setMonth()</td><td>设置月份</td></tr><tr><td>setDate()</td><td>设置日期</td></tr><tr><td>setHours()</td><td>设置小时</td></tr><tr><td>setMinutes()</td><td>设置分钟</td></tr><tr><td>setSeconds()</td><td>设置秒</td></tr><tr><td>setTime()</td><td>设置时间戳</td></tr></tbody></table><h2 id="math对象" tabindex="-1"><a class="header-anchor" href="#math对象"><span>Math对象</span></a></h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>random()</td><td>随机数</td></tr><tr><td>PI</td><td>圆周率</td></tr><tr><td>abs()</td><td>绝对值</td></tr><tr><td>ceil()</td><td>向上取整</td></tr><tr><td>floor()</td><td>向下取整</td></tr><tr><td>round()</td><td>四舍五入</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>pow(exp,base)</td><td>指数</td></tr><tr><td>sqrt(num)</td><td>开方</td></tr></tbody></table><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Error</td><td>普通错误</td></tr><tr><td>EvalError</td><td>eval()函数错误</td></tr><tr><td>RangeError</td><td>超出范围错误</td></tr><tr><td>ReferenceError</td><td>引用不存在的变量</td></tr><tr><td>SyntaxError</td><td>解析过程语法错误</td></tr><tr><td>TypeError</td><td>变量或参数不是预期类型</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>try {\n  // 可能抛出错误的代码\n} catch (error) {\n  // 错误发生时执行的代码\n  console.error(&#39;发生了一个错误:&#39;, error.message);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>finally</p><p>关闭文件流：在文件操作完成后，确保文件流被关闭。 释放数据库连接：在数据库操作完成后，释放连接资源。 清理内存：在处理完需要大量内存的数据后，清理不再需要的内存。 注销事件监听器：在组件卸载时，注销所有注册的事件监听器。</p><h2 id="json-1" tabindex="-1"><a class="header-anchor" href="#json-1"><span>JSON</span></a></h2><p>JSON.stringify() 方法</p><p>JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。</p><h2 id="原型和继承" tabindex="-1"><a class="header-anchor" href="#原型和继承"><span>原型和继承</span></a></h2>',63)],a={},l=(0,t(3744).Z)(a,[["render",function(e,n){return(0,d.wg)(),(0,d.iD)("div",null,i)}]])},6433:(e,n,t)=>{t.r(n),t.d(n,{data:()=>d});const d=JSON.parse('{"key":"v-796c7f23","path":"/guide/04.Javascript/%E5%AF%B9%E8%B1%A1.html","title":"对象","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"定义对象","slug":"定义对象","link":"#定义对象","children":[]},{"level":3,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":3,"title":"访问对象成员","slug":"访问对象成员","link":"#访问对象成员","children":[]},{"level":3,"title":"遍历对象","slug":"遍历对象","link":"#遍历对象","children":[]},{"level":3,"title":"对象是否存在","slug":"对象是否存在","link":"#对象是否存在","children":[]},{"level":3,"title":"深浅拷贝","slug":"深浅拷贝","link":"#深浅拷贝","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"自定义构造函数","slug":"自定义构造函数","link":"#自定义构造函数","children":[]},{"level":3,"title":"class关键字","slug":"class关键字","link":"#class关键字","children":[]},{"level":3,"title":"私有成员","slug":"私有成员","link":"#私有成员","children":[]},{"level":3,"title":"return 关键字","slug":"return-关键字","link":"#return-关键字","children":[]},{"level":3,"title":"this","slug":"this","link":"#this","children":[]},{"level":3,"title":"更改this指向","slug":"更改this指向","link":"#更改this指向","children":[]},{"level":3,"title":"String对象","slug":"string对象","link":"#string对象","children":[]},{"level":2,"title":"Number对象","slug":"number对象","link":"#number对象","children":[]},{"level":2,"title":"date方法","slug":"date方法","link":"#date方法","children":[]},{"level":2,"title":"Math对象","slug":"math对象","link":"#math对象","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":2,"title":"JSON","slug":"json-1","link":"#json-1","children":[]},{"level":2,"title":"原型和继承","slug":"原型和继承","link":"#原型和继承","children":[]}],"git":{},"filePathRelative":"guide/04.Javascript/对象.md"}')}}]);