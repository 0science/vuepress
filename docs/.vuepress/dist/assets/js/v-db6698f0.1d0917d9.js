"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[1195],{1712:(n,a,s)=>{s.r(a),s.d(a,{default:()=>d});var t=s(6252);const e=s.p+"assets/img/keyword.56973d95.png",l=s.p+"assets/img/sort.0deb9cfe.png",i=[(0,t.uE)('<h1 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h1><h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介"><span>一、简介</span></a></h2><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1.定义</span></a></h3><p>JavaScript 是一种脚本语言，是一种动态语言，是一种解释型语言，是一种弱类型语言，是一种跨平台语言</p><h3 id="_2-作用" tabindex="-1"><a class="header-anchor" href="#_2-作用"><span>2.作用</span></a></h3><ul><li>网页特效 (监听用户的一些行为让网页作出对应的反馈)</li><li>表单验证 (针对表单数据的合法性进行判断)</li><li>数据交互 (获取后台的数据, 渲染到前端)</li><li>服务端编程 (node.js)</li></ul><h3 id="_3-分类" tabindex="-1"><a class="header-anchor" href="#_3-分类"><span>3.分类</span></a></h3><ul><li>ECMAScript（规定了js基础语法核心知识）</li><li>DOM（操作文档）</li><li>BOM（操作浏览器）</li></ul><h2 id="二、引入方式" tabindex="-1"><a class="header-anchor" href="#二、引入方式"><span>二、引入方式</span></a></h2><h3 id="_1-内嵌式" tabindex="-1"><a class="header-anchor" href="#_1-内嵌式"><span>1.内嵌式</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;script&gt;\n\t\n&lt;/script&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-外链式" tabindex="-1"><a class="header-anchor" href="#_2-外链式"><span>2.外链式</span></a></h3><p><code> &lt;script src=&quot;js/test.js&quot;&gt;&lt;/script&gt;</code></p><h3 id="_3-行内式" tabindex="-1"><a class="header-anchor" href="#_3-行内式"><span>3.行内式</span></a></h3><p><code>&lt;a href=&quot;javascript:alert(&#39;单击超链接&#39;)&quot;&gt;点击这里&lt;/a&gt;</code></p><blockquote><p>注意：<code>&lt;script&gt;</code>放在<code>&lt;body&gt;</code>标签底部可以降低页面下载的影响</p></blockquote><h1 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h1><h2 id="一、变量" tabindex="-1"><a class="header-anchor" href="#一、变量"><span>一、变量</span></a></h2><h3 id="_1-定义-1" tabindex="-1"><a class="header-anchor" href="#_1-定义-1"><span>1.定义</span></a></h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>变量</td><td>变量是存储数据的容器</td></tr><tr><td>数组</td><td>存储多个数据的容器</td></tr><tr><td>const</td><td>常量，不允许重新赋值</td></tr><tr><td>let</td><td>块级作用域，只在{}中有效，不支持重名</td></tr><tr><td>var</td><td>全局作用域，支持重名，不建议使用</td></tr></tbody></table><h3 id="_2-标识符" tabindex="-1"><a class="header-anchor" href="#_2-标识符"><span>2.标识符</span></a></h3><ul><li>只能是字母、数字、下划线、$，且不能能数字开头</li><li>字母区分大小写</li><li>关键字或保留字不允许使用</li><li>保证变量的可读性</li></ul><h3 id="_3-关键字" tabindex="-1"><a class="header-anchor" href="#_3-关键字"><span>3.关键字</span></a></h3><h4 id="保留关键字" tabindex="-1"><a class="header-anchor" href="#保留关键字"><span>保留关键字</span></a></h4><p><img src="'+e+'" alt=""></p><h4 id="let-和-var" tabindex="-1"><a class="header-anchor" href="#let-和-var"><span><code>let</code> 和 <code>var</code></span></a></h4><table><thead><tr><th>能否</th><th>var</th><th>let</th></tr></thead><tbody><tr><td>声明并赋值</td><td>√</td><td>√</td></tr><tr><td>重复声明</td><td>√</td><td>×</td></tr><tr><td>声明多个变量并赋值</td><td>√</td><td>√</td></tr></tbody></table><h2 id="二、数据类型" tabindex="-1"><a class="header-anchor" href="#二、数据类型"><span>二、数据类型</span></a></h2><h3 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型"><span>1.基本数据类型</span></a></h3><table><thead><tr><th>数据类型</th><th></th><th></th></tr></thead><tbody><tr><td>字符串型</td><td>string</td><td>单双反引号包裹</td></tr><tr><td>数值型</td><td>number</td><td>正数、负数、小数</td></tr><tr><td>布尔型</td><td>boolean</td><td>true、false</td></tr><tr><td>未定义型</td><td>undefined</td><td>只声明，未赋值</td></tr><tr><td>空</td><td>null</td><td>有值为空</td></tr></tbody></table><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h4><ul><li>基本数据类型 <ul><li>number 数字型</li><li>string 字符串型</li><li>boolean 布尔型</li><li>undefined 未定义型</li><li>null 空类型</li></ul></li><li>引用数据类型 <ul><li>Object</li></ul></li></ul><h4 id="undefined和null的区别" tabindex="-1"><a class="header-anchor" href="#undefined和null的区别"><span>undefined和null的区别</span></a></h4><p>undefined是只声明，不赋值，说明值没传过来 null是赋值了，但值为空，说明还不知到放什么，先放个null</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h4><ul><li>顺序执行，分号可无</li><li>大小写敏感</li><li>空格省略，换行断句</li><li>typeof 关键字检测数据类型</li><li>乘、除、取余优先级大于加、减</li><li>加号，数字相加，字符相连</li></ul><h4 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`${}`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-数据类型检测" tabindex="-1"><a class="header-anchor" href="#_2-数据类型检测"><span>2.数据类型检测</span></a></h3><h4 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// number</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象原型扩展函" tabindex="-1"><a class="header-anchor" href="#对象原型扩展函"><span>对象原型扩展函</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token string">&quot;Null&quot;</span> <span class="token comment">// 数据类型</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Null]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;[object &#39;</span><span class="token operator">+</span>type<span class="token operator">+</span><span class="token string">&#39;]&#39;</span> <span class="token comment">//true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_3-数据类型转换"><span>3.数据类型转换</span></a></h3><h4 id="转布尔" tabindex="-1"><a class="header-anchor" href="#转布尔"><span>转布尔</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Blooean()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>转换前</th><th>转换后</th></tr></thead><tbody><tr><td>非空字符串</td><td>true</td></tr><tr><td>非零数值</td><td>true</td></tr><tr><td>空字符串</td><td>false</td></tr><tr><td>NaN</td><td>false</td></tr><tr><td>0</td><td>false</td></tr><tr><td>undefined</td><td>false</td></tr><tr><td>null</td><td>false</td></tr></tbody></table><h4 id="转数值" tabindex="-1"><a class="header-anchor" href="#转数值"><span>转数值</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Number() //数值型\nparseInt() //整型\nparseFloat() //浮点型\nisNaN() //判断是否为数值型\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>转换前</th><th>Number()</th><th>parseInt()</th><th>parseFloat()</th></tr></thead><tbody><tr><td>&quot;123&quot;</td><td>123</td><td>123</td><td>123</td></tr><tr><td>&quot; &quot;</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>&quot;2abc1&quot;</td><td>NaN</td><td>2</td><td>2</td></tr><tr><td>&quot;abc&quot;</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>null</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>undefined</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>false</td><td>0</td><td>NaN</td><td>NaN</td></tr><tr><td>true</td><td>1</td><td>NaN</td><td>NaN</td></tr></tbody></table><h4 id="转字符" tabindex="-1"><a class="header-anchor" href="#转字符"><span>转字符</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String() //全都可以转\ntoString() //null和undefined不能转\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、运算符" tabindex="-1"><a class="header-anchor" href="#三、运算符"><span>三、运算符</span></a></h2><h3 id="_1-算数运算符" tabindex="-1"><a class="header-anchor" href="#_1-算数运算符"><span>1.算数运算符</span></a></h3><h3 id="_2-字符串运算符" tabindex="-1"><a class="header-anchor" href="#_2-字符串运算符"><span>2.字符串运算符</span></a></h3><h3 id="_3-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_3-赋值运算符"><span>3.赋值运算符</span></a></h3><h3 id="_4-比较运算符" tabindex="-1"><a class="header-anchor" href="#_4-比较运算符"><span>4.比较运算符</span></a></h3><h3 id="_5-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5-逻辑运算符"><span>5.逻辑运算符</span></a></h3><h3 id="_6-三元运算符" tabindex="-1"><a class="header-anchor" href="#_6-三元运算符"><span>6.三元运算符</span></a></h3><h3 id="_7-位运算符" tabindex="-1"><a class="header-anchor" href="#_7-位运算符"><span>7.位运算符</span></a></h3><table><thead><tr><th>运算符</th><th>运算</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>~</td><td>取反</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td></tr></tbody></table><h3 id="_8-运算符优先级" tabindex="-1"><a class="header-anchor" href="#_8-运算符优先级"><span>8.运算符优先级</span></a></h3><p>先括号，再乘除取余，后加减</p><h2 id="四、流程控制" tabindex="-1"><a class="header-anchor" href="#四、流程控制"><span>四、流程控制</span></a></h2><h3 id="_1-if语句" tabindex="-1"><a class="header-anchor" href="#_1-if语句"><span>1.if语句</span></a></h3><h3 id="_2-if···else语句" tabindex="-1"><a class="header-anchor" href="#_2-if···else语句"><span>2.if···else语句</span></a></h3><h3 id="_3-switch语句" tabindex="-1"><a class="header-anchor" href="#_3-switch语句"><span>3.switch语句</span></a></h3><h3 id="_4-while循环" tabindex="-1"><a class="header-anchor" href="#_4-while循环"><span>4.while循环</span></a></h3><h3 id="_5-do···while循环" tabindex="-1"><a class="header-anchor" href="#_5-do···while循环"><span>5.do···while循环</span></a></h3><h3 id="_6-for循环" tabindex="-1"><a class="header-anchor" href="#_6-for循环"><span>6.for循环</span></a></h3><h3 id="_7-循环嵌套" tabindex="-1"><a class="header-anchor" href="#_7-循环嵌套"><span>7.循环嵌套</span></a></h3><h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><h2 id="一、基本操作" tabindex="-1"><a class="header-anchor" href="#一、基本操作"><span>一、基本操作</span></a></h2><h3 id="_1-数组定义" tabindex="-1"><a class="header-anchor" href="#_1-数组定义"><span>1.数组定义</span></a></h3><p><strong>作用</strong>：存储一组变量 <strong>取值</strong>：数组名[下标] <strong>元素</strong>：数组中保存的每个数据都叫数组元素 <strong>下标</strong>：数组中数据的编号 <strong>长度</strong>：数组中数据的个数，通过数组的length属性获得</p><h3 id="_2-创建数组" tabindex="-1"><a class="header-anchor" href="#_2-创建数组"><span>2.创建数组</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var 数组名 = new Array()\nvar 数组名 = [ ]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  var arr = new Array(123, &#39;abc&#39;, null, ,true, undefined)\n  var arr = [123, &#39;abc&#39;, null, ,true, undefined]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-获取长度" tabindex="-1"><a class="header-anchor" href="#_3-获取长度"><span>3.获取长度</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>.length\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var arr1 = [78, 88, 98];\nconsole.log(arr1.length);   // 输出结果为：3\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-遍历数组" tabindex="-1"><a class="header-anchor" href="#_4-遍历数组"><span>4.遍历数组</span></a></h3><p>for in 循环</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var navlistArr = [&#39;首页&#39;,&#39;新闻&#39;,&#39;关于&#39;];\nvar str = &#39;&lt;ul&gt;&#39;;\nfor(var i in navlistArr){\n    str += &#39;&lt;li&gt;&lt;a&gt;&#39;+ navlistArr[i] +&#39;&lt;/a&gt;&lt;/li&gt;&#39;;\n}\nstr += &#39;&lt;/ul&gt;&#39;;\ndocument.getElementById(&#39;navlist&#39;).innerHTML = str;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-增加元素" tabindex="-1"><a class="header-anchor" href="#_5-增加元素"><span>5.增加元素</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 为空数组添加元素\nvar height = [];\nheight[5] =  183;\nheight[0] =  175;\nheight[3] =  150;\nconsole.log(height);      // 输出结果：(6) [175, empty × 2, 150, empty, 183]\n\n// 为非空数组添加元素\nvar arr = [&#39;Asa&#39;, &#39;Taylor&#39;];\narr[2] = &#39;Tom&#39;;\narr[3] =  &#39;Jack&#39;;\nconsole.log(arr);         // 输出结果：(4) [&quot;Asa&quot;, &quot;Taylor&quot;, &quot;Tom&quot;, &quot;Jack&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-删除元素" tabindex="-1"><a class="header-anchor" href="#_6-删除元素"><span>6.删除元素</span></a></h3><p>删除后依旧占用空间</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var stu = [&#39;Tom&#39;, &#39;Jimmy&#39;, &#39;Lucy&#39;];\nconsole.log(stu);     // 输出结果：(3) [&quot;Tom&quot;, &quot;Jimmy&quot;, &quot;Lucy&quot;]\ndelete stu[1];        // 删除数组中第2个元素\nconsole.log(stu);     // 输出结果：(3) [&quot;Tom&quot;, empty, &quot;Lucy&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-修改元素" tabindex="-1"><a class="header-anchor" href="#_7-修改元素"><span>7.修改元素</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];\narr[2] = 123;\narr[3] = 456;\nconsole.log(arr);         // 输出结果：(4) [&quot;a&quot;, &quot;b&quot;, 123, 456]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值"><span>解构赋值</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 传统方式\nvar arr = [1, 2, 3];\nvar a = arr[0];\nvar b = arr[1];\nvar c = arr[2];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// ES6解构赋值\nvar n1 = 4\nvar n2 = 8;\n[n1, n2] = [n2, n1];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-查找数组" tabindex="-1"><a class="header-anchor" href="#_8-查找数组"><span>8.查找数组</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var arr = [&#39;hello&#39;, &#39;JavaScript&#39;, 22.48, true];\nconsole.log(arr[0]);\nconsole.log(arr[2]);\nconsole.log(arr);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、二维数组" tabindex="-1"><a class="header-anchor" href="#二、二维数组"><span>二、二维数组</span></a></h2><h3 id="_1-创建数组" tabindex="-1"><a class="header-anchor" href="#_1-创建数组"><span>1.创建数组</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var 数组名 = new Array(new Array(),new Array())\nvar 数组名 = [[],[]]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-遍历数组" tabindex="-1"><a class="header-anchor" href="#_2-遍历数组"><span>2.遍历数组</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token keyword">in</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\tsum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">// 381</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数组转置" tabindex="-1"><a class="header-anchor" href="#_3-数组转置"><span>3.数组转置</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;转置前&quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>\n<span class="token comment">/*\n[\n\t[1,2,3],\n\t[4,5,6],\n\t[7,8,9],\n\t[10,11,12]\n]\n*/</span>\n<span class="token comment">//定义空数组存放转置后的值</span>\n<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//获取层数</span>\n    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//交换位置</span>\n\t\tres<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;转置后&quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n<span class="token comment">/*\n[\n\t[1, 4, 7, 10]\n\t[2, 5, 8, 11]\n\t[3, 6, 9, 12]\n]\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、数组排序" tabindex="-1"><a class="header-anchor" href="#三、数组排序"><span>三、数组排序</span></a></h2><p><img src="'+l+'" alt=""></p><h3 id="_1-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_1-冒泡排序"><span>1.冒泡排序</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>\n            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp\n\t\t<span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [2, 11, 12, 23, 56, 64, 101]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-插入排序" tabindex="-1"><a class="header-anchor" href="#_2-插入排序"><span>2.插入排序</span></a></h3><h3 id="_3-快速排序" tabindex="-1"><a class="header-anchor" href="#_3-快速排序"><span>3.快速排序</span></a></h3><h3 id="_4-选择排序" tabindex="-1"><a class="header-anchor" href="#_4-选择排序"><span>4.选择排序</span></a></h3><h3 id="_5-希尔排序" tabindex="-1"><a class="header-anchor" href="#_5-希尔排序"><span>5.希尔排序</span></a></h3><h3 id="_6-归并排序" tabindex="-1"><a class="header-anchor" href="#_6-归并排序"><span>6.归并排序</span></a></h3><h3 id="_7-堆排序" tabindex="-1"><a class="header-anchor" href="#_7-堆排序"><span>7.堆排序</span></a></h3><h3 id="_8-桶排序" tabindex="-1"><a class="header-anchor" href="#_8-桶排序"><span>8.桶排序</span></a></h3><h3 id="_10-计数排序" tabindex="-1"><a class="header-anchor" href="#_10-计数排序"><span>10.计数排序</span></a></h3><h2 id="四、数组方法" tabindex="-1"><a class="header-anchor" href="#四、数组方法"><span>四、数组方法</span></a></h2><h3 id="_1-栈和队列" tabindex="-1"><a class="header-anchor" href="#_1-栈和队列"><span>1.栈和队列</span></a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>push()</td><td>向数组尾部添加元素</td></tr><tr><td>pop()</td><td>删除数组尾部元素</td></tr><tr><td>shift()</td><td>删除数组头部元素</td></tr><tr><td>unshift()</td><td>向数组头部添加元素</td></tr></tbody></table><h3 id="_2-检索方法" tabindex="-1"><a class="header-anchor" href="#_2-检索方法"><span>2.检索方法</span></a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>includes()</td><td>判断数组是否包含某个元素</td></tr><tr><td>Array.isArray()</td><td>判断是否为数组</td></tr><tr><td>indexOf()</td><td>查找数组中第一个该元素位置</td></tr><tr><td>lastIndexOf()</td><td>查找数组中最后一个该元素位置</td></tr></tbody></table><h3 id="_3-数组转字符串" tabindex="-1"><a class="header-anchor" href="#_3-数组转字符串"><span>3.数组转字符串</span></a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>join()</td><td>将数组元素连接成字符串</td></tr><tr><td>toString()</td><td>返回一个字符串</td></tr></tbody></table><h3 id="_4-数据过滤" tabindex="-1"><a class="header-anchor" href="#_4-数据过滤"><span>4.数据过滤</span></a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>filter()</td><td>过滤数组</td></tr></tbody></table><h4 id="直接修改数组" tabindex="-1"><a class="header-anchor" href="#直接修改数组"><span>直接修改数组</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//筛选出偶数</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> number <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [4,6,8]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据筛选" tabindex="-1"><a class="header-anchor" href="#数据筛选"><span>数据筛选</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//筛选高价值客户</span>\n<span class="token comment">//过去一年内消费总额超过10000元或订单数量超过10个的高价值客户</span>\n<span class="token comment">/*\ncustomers:客人数组\nid:唯一id\nname：客人名称\norders:订单数组\namount:金额\ndate:日期\n*/</span>\n<span class="token keyword">const</span> customers <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">orders</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-05-15&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">2500</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-07-22&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">1800</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-08-05&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">orders</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-03-01&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">2200</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-09-12&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">orders</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">750</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-02-17&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-04-03&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-05-09&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">1300</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-06-21&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;赵六&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">orders</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-01-05&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">1700</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-02-20&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">2300</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-03-18&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙七&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">orders</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">3500</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-04-08&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">4200</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-05-22&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;老八&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">orders</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">550</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-03-02&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">850</span><span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&#39;2023-08-16&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> highCustomer <span class="token operator">=</span> customers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">people</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//从customers数组中筛选具体的对象</span>\n\t<span class="token keyword">const</span> cost <span class="token operator">=</span>people<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span>times</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//将上述对象中的orders中的amount累加</span>\n\t\t<span class="token keyword">const</span> orderDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>times<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token comment">//获取订单时间</span>\n        <span class="token keyword">const</span> currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取当前日期 2025-1-6</span>\n        currentDate<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span>currentDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> \n        <span class="token comment">// getFullYear()获取当前时间 2025，setFullYear()设置当前时间 2025</span>\n        <span class="token keyword">return</span> sum <span class="token operator">+</span> <span class="token punctuation">(</span>orderDate <span class="token operator">&gt;=</span> currentDate <span class="token operator">?</span> times<span class="token punctuation">.</span>amount <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 初始值为0，从0开始相加</span>\n    <span class="token keyword">return</span> cost <span class="token operator">&gt;=</span> <span class="token number">10000</span> <span class="token operator">||</span> people<span class="token punctuation">.</span>orders<span class="token punctuation">.</span>length <span class="token operator">&gt;</span><span class="token number">10</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>highCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">/*\n{ id: 2, name: &#39;李四&#39;, orders: [\n    { amount: 9000, date: &#39;2023-03-01&#39; },\n    { amount: 2200, date: &#39;2023-09-12&#39; }\n  ]}\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据清洗" tabindex="-1"><a class="header-anchor" href="#数据清洗"><span>数据清洗</span></a></h4><h4 id="数据过滤" tabindex="-1"><a class="header-anchor" href="#数据过滤"><span>数据过滤</span></a></h4><h3 id="_5-其他方法" tabindex="-1"><a class="header-anchor" href="#_5-其他方法"><span>5.其他方法</span></a></h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>reverse()</td><td>反转数组</td></tr><tr><td>sort()</td><td>对数组元素进行排序</td></tr><tr><td>concat()</td><td>连接两个数组</td></tr><tr><td>slice()</td><td>截取数组</td></tr><tr><td>splice()</td><td>删除数组元素</td></tr><tr><td>forEach()</td><td>遍历数组</td></tr><tr><td>map()</td><td>映射数组</td></tr><tr><td>every()</td><td>判断数组元素是否满足条件</td></tr><tr><td>some()</td><td>判断数组元素是否满足条件</td></tr><tr><td>reduce()</td><td>数组元素累加</td></tr><tr><td>reduceRight()</td><td>数组元素累加</td></tr><tr><td>find()</td><td>查找数组元素</td></tr><tr><td>findIndex()</td><td>查找数组元素位置</td></tr><tr><td>fill()</td><td>填充数组</td></tr><tr><td>entries()</td><td>返回数组元素键值对</td></tr><tr><td>keys()</td><td>返回数组元素键名</td></tr><tr><td>values()</td><td>返回数组元素键值</td></tr><tr><td>Symbol.iterator()</td><td>返回数组迭代器</td></tr><tr><td>Array.from()</td><td>将类数组对象转换为数组</td></tr><tr><td>Array.of()</td><td>将一组值转换为数组</td></tr></tbody></table><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><h2 id="一、定义与调用" tabindex="-1"><a class="header-anchor" href="#一、定义与调用"><span>一、定义与调用</span></a></h2><h3 id="_1-定义-2" tabindex="-1"><a class="header-anchor" href="#_1-定义-2"><span>1.定义</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function 函数名(参数1,参数2,...){\n    函数体\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-参数" tabindex="-1"><a class="header-anchor" href="#_2-参数"><span>2.参数</span></a></h3><h4 id="无参函数" tabindex="-1"><a class="header-anchor" href="#无参函数"><span>无参函数</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="有参函数" tabindex="-1"><a class="header-anchor" href="#有参函数"><span>有参函数</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">// 9</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="剩余参数" tabindex="-1"><a class="header-anchor" href="#剩余参数"><span>剩余参数</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function 函数名(...参数){\n    函数体\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>theNums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> theNums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、作用域" tabindex="-1"><a class="header-anchor" href="#二、作用域"><span>二、作用域</span></a></h2><p>函数是一个基本作用域</p><h3 id="_1-全局变量" tabindex="-1"><a class="header-anchor" href="#_1-全局变量"><span>1.全局变量</span></a></h3><p>函数外声明或函数内隐式声明的变量</p><h3 id="_2-局部变量" tabindex="-1"><a class="header-anchor" href="#_2-局部变量"><span>2.局部变量</span></a></h3><p>函数内用var声明的变量</p><h3 id="_3-块级变量" tabindex="-1"><a class="header-anchor" href="#_3-块级变量"><span>3.块级变量</span></a></h3><p>块级变量：let声明的变量，只在{}中有效</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token comment">//全局变量</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;234&#39;</span> <span class="token comment">//局部变量</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//块级变量</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_4-垃圾回收"><span>4.垃圾回收</span></a></h3><p>函数执行后，销毁局部变量，可以使用全局变量保存和return返回来保存</p><h2 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h2><p>没有名字的函数</p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h2><p>函数名 = 参数 =&gt; 返回值</p><h2 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h2><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>find()</td><td>返回满足的第一个条件的元素</td></tr><tr><td>every()</td><td>判断是否所有元素都满足条件</td></tr><tr><td>some()</td><td>判断是否有元素满足条件</td></tr><tr><td>forEach()</td><td>遍历数组</td></tr><tr><td>map()</td><td>返回一个新数组，元素是原数组元素调用函数处理后的值</td></tr><tr><td>reduce()</td><td>对数组元素进行计算，返回一个值</td></tr><tr><td>reduceRight()</td><td>从右向左计算</td></tr></tbody></table><h2 id="函数嵌套" tabindex="-1"><a class="header-anchor" href="#函数嵌套"><span>函数嵌套</span></a></h2><p>函数可以嵌套，嵌套的函数可以访问外层函数的变量，但是不能访问内层函数的变量</p><h2 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h2><p>函数执行时，会创建一个作用域链，作用域链中包含当前作用域，当前作用域的父作用域，直到全局作用域 找不到就返回上一层找，直到找到为止</p><h2 id="闭包函数" tabindex="-1"><a class="header-anchor" href="#闭包函数"><span>闭包函数</span></a></h2><ol><li>函数外部访问函数内的变量</li><li>变量的值保存在内存中，不能被修改</li></ol><h1 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h1><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><p>封装性：隐藏细节，开放接口 继承性：继承另一个对象的成员 多态性：同一操作对不同对象，产生的结果不同</p><h3 id="定义对象" tabindex="-1"><a class="header-anchor" href="#定义对象"><span>定义对象</span></a></h3><p><code>var obj = {}</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj = obj{\n    name:&quot;zhangsan&quot;,\n    age:18,\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{\n    &quot;name&quot;:&quot;zhangsan&quot;,\n    &quot;age&quot;:18\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问对象成员" tabindex="-1"><a class="header-anchor" href="#访问对象成员"><span>访问对象成员</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj = {\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nconsole.log(obj.name)\nvar introduce = function(){\n    console.log(&quot;my name&quot;)\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象"><span>遍历对象</span></a></h3><p>for ··· in</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj ={\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nfor(var k in obj){\n    console.log(k,obj[k])\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象是否存在" tabindex="-1"><a class="header-anchor" href="#对象是否存在"><span>对象是否存在</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj= {\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nconsole.log(&#39;name&#39; in obj)\nconsole.log(&#39;sex&#39; in obj)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝"><span>深浅拷贝</span></a></h3><p>浅拷贝：复制后相同,改一个变两个，节省内存</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj ={\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nvar obj2 = obj\nobj2.name = &quot;lisi&quot;\nconsole.log(obj === obj2)\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深拷贝：复制后不同，改一个不影响另一个</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj ={\n    name:&quot;zhangsan&quot;,\n    age:18\n}\nvar obj2 = function(obj){\n    for(i in obj){\n        obj2[i] = obj[i]\n    }\n}\nobj2.name = &quot;lisi&quot;\nconsole.log(obj === obj2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>构造函数：创建相同特征的对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function factory(name,age){\n    var o = {}\n    o.name = name\n    o.age = age\n}\no1 = factory(&quot;lisi&quot;,24)\no2 = factory(&quot;wangwu&quot;,25)\nconsole.log(o1)\nconsole.log(o2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类：</p><p>实例化：通过类创建对象的过程</p><p>内置构造函数：</p><p><code>{}.constructor</code></p><p>[native code]表示是原生代码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var obj = new Object()\nvar str = new String(&quot;123&quot;)\nconsole.log(obj.constructor)\nconsole.log(str.constructor)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义构造函数" tabindex="-1"><a class="header-anchor" href="#自定义构造函数"><span>自定义构造函数</span></a></h3><ol><li>帕斯卡命名法：首写字母大写</li><li>使用this指向实例化对象</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function Person(name,age){\n    this.name = name;\n    this.age = age;\n    this.sayHello = function(){\n        console.log(&quot;Hello,my name is &quot;+ this.name)\n    }\n}\nvar p1 = new Person(&quot;zhangsan&quot;,18)\nvar p2 = new Person(&quot;lisi&quot;,20)\np1.sayHello()\nconsole.log(p1)\np2.sayHello()\nconsole.log(p2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class关键字" tabindex="-1"><a class="header-anchor" href="#class关键字"><span>class关键字</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>class Person{\n    constructor(name,age){\n        this.name = name\n        this.age = age\n    }\n    introduce(){\n        console.log(&#39;我是&#39; + this.name + &#39;,今年&#39;+this.age + &#39;岁&#39;)\n    }\n}\nvar p = new Person(&quot;zhangsan&quot;,18)\np.introduce()\nconsole.log(p)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="私有成员" tabindex="-1"><a class="header-anchor" href="#私有成员"><span>私有成员</span></a></h3><p>私有成员:构造函数中用var定义的成员</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function Person(){\n    var name = &quot;zhangsan&quot;\n    this.getName = function(){\n        return name\n    }\n}\nvar p = new Person()\nconsole.log(p.name)\nconsole.log(p.getName())\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="return-关键字" tabindex="-1"><a class="header-anchor" href="#return-关键字"><span>return 关键字</span></a></h3><p>return + 基本类型 = 数据 return +引用类型 = 对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//返回基本数据类型\nfunction Person(){\n    obj =this\n    return 123\n}\nvar obj,p= new Person()\nconsole.log(obj === p)\n//返回引用数据类型\nfunction Person2(){\n    obj2 = this\n    return {}\n}\nvar obj2,p2 = new Person2()\nconsole.log(obj2 === p2)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h3><ol><li>指向构造函数内部对象</li><li>直接调用函数调用全局对象</li><li>对象的方法，指向对象</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function obj(){\n    return this\n}\nvar o ={\n    name :&quot;zhangsan&quot;,\n    function:obj\n}\nconsole.log(obj() == window)\nconsole.log(o.function() === o)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改this指向" tabindex="-1"><a class="header-anchor" href="#更改this指向"><span>更改this指向</span></a></h3><p>apply() call()</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>function obj(){\n    console.log(this.name)\n}\nobj.apply({name:&#39;张三&#39;})\nobj.call({name:&#39;李四&#39;})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string对象" tabindex="-1"><a class="header-anchor" href="#string对象"><span>String对象</span></a></h3><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>length</td><td>字符串长度</td></tr><tr><td>charAt()</td><td>从0开始获取字符位置</td></tr><tr><td>indexOf()</td><td>获取字符首次出现位置</td></tr><tr><td>lastIndexOf()</td><td>获取字符最后出现位置</td></tr><tr><td>substr()</td><td>按位置截取字符串</td></tr><tr><td>substring()</td><td>按长度截取字符串</td></tr><tr><td>toLowerCase()</td><td>转小写</td></tr><tr><td>toUpperCase()</td><td>转大写</td></tr><tr><td>trim()</td><td>去除首尾空格</td></tr><tr><td>replace()</td><td>替换字符串</td></tr><tr><td>split()</td><td>分割字符串</td></tr></tbody></table><h2 id="number对象" tabindex="-1"><a class="header-anchor" href="#number对象"><span>Number对象</span></a></h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>MAX_VALUE</td><td>最大值</td></tr><tr><td>MIN_VALUE</td><td>最小值</td></tr><tr><td>toFixed()</td><td>保留小数位</td></tr></tbody></table><h2 id="date方法" tabindex="-1"><a class="header-anchor" href="#date方法"><span>date方法</span></a></h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取年份</td></tr><tr><td>getMonth()</td><td>获取月份</td></tr><tr><td>getDate()</td><td>获取日期</td></tr><tr><td>getDay()</td><td>获取星期</td></tr><tr><td>getHours()</td><td>获取小时</td></tr><tr><td>getMinutes()</td><td>获取分钟</td></tr><tr><td>getSeconds()</td><td>获取秒</td></tr><tr><td>getTime()</td><td>获取时间戳</td></tr><tr><td>setFullYear()</td><td>设置年份</td></tr><tr><td>setMonth()</td><td>设置月份</td></tr><tr><td>setDate()</td><td>设置日期</td></tr><tr><td>setHours()</td><td>设置小时</td></tr><tr><td>setMinutes()</td><td>设置分钟</td></tr><tr><td>setSeconds()</td><td>设置秒</td></tr><tr><td>setTime()</td><td>设置时间戳</td></tr></tbody></table><h2 id="math对象" tabindex="-1"><a class="header-anchor" href="#math对象"><span>Math对象</span></a></h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>random()</td><td>随机数</td></tr><tr><td>PI</td><td>圆周率</td></tr><tr><td>abs()</td><td>绝对值</td></tr><tr><td>ceil()</td><td>向上取整</td></tr><tr><td>floor()</td><td>向下取整</td></tr><tr><td>round()</td><td>四舍五入</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>pow(exp,base)</td><td>指数</td></tr><tr><td>sqrt(num)</td><td>开方</td></tr></tbody></table><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><h2 id="报错信息" tabindex="-1"><a class="header-anchor" href="#报错信息"><span>报错信息</span></a></h2><h3 id="语法错误" tabindex="-1"><a class="header-anchor" href="#语法错误"><span>语法错误</span></a></h3><h3 id="运行错误" tabindex="-1"><a class="header-anchor" href="#运行错误"><span>运行错误</span></a></h3><h2 id="常用语句" tabindex="-1"><a class="header-anchor" href="#常用语句"><span>常用语句</span></a></h2><table><thead><tr><th>语句</th><th>功能</th></tr></thead><tbody><tr><td>alert()</td><td>弹出对话框</td></tr><tr><td>console.log()</td><td>打印到控制台</td></tr><tr><td>prompt()</td><td>弹出对话框，返回用户输入的值</td></tr><tr><td>confirm()</td><td>弹出对话框，返回用户点击的按钮</td></tr><tr><td>setInterval()</td><td>定时器</td></tr><tr><td>setTimeout()</td><td>定时器</td></tr><tr><td>document.write()</td><td>向页面写入内容</td></tr></tbody></table><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Error</td><td>普通错误</td></tr><tr><td>EvalError</td><td>eval()函数错误</td></tr><tr><td>RangeError</td><td>超出范围错误</td></tr><tr><td>ReferenceError</td><td>引用不存在的变量</td></tr><tr><td>SyntaxError</td><td>解析过程语法错误</td></tr><tr><td>TypeError</td><td>变量或参数不是预期类型</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>try {\n  // 可能抛出错误的代码\n} catch (error) {\n  // 错误发生时执行的代码\n  console.error(&#39;发生了一个错误:&#39;, error.message);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>finally</p><p>关闭文件流：在文件操作完成后，确保文件流被关闭。 释放数据库连接：在数据库操作完成后，释放连接资源。 清理内存：在处理完需要大量内存的数据后，清理不再需要的内存。 注销事件监听器：在组件卸载时，注销所有注册的事件监听器。</p><h2 id="json-1" tabindex="-1"><a class="header-anchor" href="#json-1"><span>JSON</span></a></h2><p>JSON.stringify() 方法</p><p>JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。</p><h2 id="原型和继承" tabindex="-1"><a class="header-anchor" href="#原型和继承"><span>原型和继承</span></a></h2><h1 id="bom" tabindex="-1"><a class="header-anchor" href="#bom"><span>BOM</span></a></h1><h2 id="bom对象" tabindex="-1"><a class="header-anchor" href="#bom对象"><span>BOM对象</span></a></h2><ul><li>document 文档对象</li><li>window 窗口对象</li><li>location 位置对象</li><li>history 历史对象</li><li>navigator 浏览器对象</li><li>screen 屏幕对象</li></ul><h2 id="window对象" tabindex="-1"><a class="header-anchor" href="#window对象"><span>window对象</span></a></h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>closed</td><td>返回一个布尔值，该值指示窗口是否已关闭</td></tr><tr><td>name</td><td>返回窗口的名称</td></tr><tr><td>opener</td><td>返回window对象的引用</td></tr><tr><td>parent</td><td>返回当前窗口的父窗口</td></tr><tr><td>self</td><td>返回当前窗口</td></tr><tr><td>top</td><td>返回最顶层的父窗口</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框</td></tr><tr><td>confirm()</td><td>显示带有一段消息和两个按钮的提示框</td></tr><tr><td>prompt()</td><td>显示一个可提示用户输入的对话框</td></tr><tr><td>open()</td><td>打开一个新的浏览器窗口或查找一个已命名的窗口</td></tr><tr><td>close()</td><td>关闭当前窗口</td></tr><tr><td>focus()</td><td>把键盘输入焦点移到当前窗口</td></tr><tr><td>print()</td><td>打印当前窗口的内容</td></tr><tr><td>scrollBy()</td><td>指定像素值滚动当前窗口</td></tr><tr><td>scrollTo()</td><td>指定坐标滚动当前窗口</td></tr></tbody></table><h2 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器"><span>定时器</span></a></h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setTimeout()</td><td>数毫秒后调用一个函数</td></tr><tr><td>clearTimeout()</td><td>取消setTimeout()</td></tr><tr><td>setInterval()</td><td>数毫秒后调用一个函数，重复执行</td></tr><tr><td>clearInterval()</td><td>取消setInterval()</td></tr></tbody></table><h2 id="location对象" tabindex="-1"><a class="header-anchor" href="#location对象"><span>location对象</span></a></h2><h2 id="history对象" tabindex="-1"><a class="header-anchor" href="#history对象"><span>history对象</span></a></h2><h2 id="navigator对象" tabindex="-1"><a class="header-anchor" href="#navigator对象"><span>navigator对象</span></a></h2><h2 id="screen对象" tabindex="-1"><a class="header-anchor" href="#screen对象"><span>screen对象</span></a></h2><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom"><span>DOM</span></a></h2><p>文档对象是网页中所有对象的所有者</p><h4 id="定时器-1" tabindex="-1"><a class="header-anchor" href="#定时器-1"><span>定时器</span></a></h4><p>轮循定时器</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>setInterval(function(){},1000)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>延迟定时器</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>setTimeout(function(){},1000)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="选择元素" tabindex="-1"><a class="header-anchor" href="#选择元素"><span>选择元素</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//通过 id 找元素\ndocument.getElementById(id) \n\n//通过 类 找元素\ndocument.getElementsByClassName(name) \n\n//通过 标签 找元素\ndocument.getElementsByTagName(name)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用dom" tabindex="-1"><a class="header-anchor" href="#使用dom"><span>使用DOM</span></a></h3><p>element.childNodes 返回一个元素的子节点的数组。</p><p>element.firstChild 返回元素的第一个子节点。</p><p>element.lastChild 返回元素的最后一个子节点。</p><p>element.hasChildNodes 如果元素有任何子节点，则返回 true，否则为 false 。</p><p>element.nextSibling 返回相同树级别的下一个节点。</p><p>element.previousSibling 返回在同一树级别的上一个节点。</p><p>element.parentNode 返回元素的父节点。</p><p>element.cloneNode() 克隆元素并返回结果节点。</p><p>document.createElement(element) 创建一个新的元素节点。</p><p>document.createTextNode(text) 创建一个新的文本节点。</p><p>element.appendChild(newNode) 将一个新的子节点添加到元素作为最后一个子节点。</p><p>element.insertBefore(node1, node2) 在节点2之前插入node1作为子节点。</p><p>要替换HTML元素，使用 element.replaceChild(newNode,oldNode) 方法</p>',271)],p={},d=(0,s(3744).Z)(p,[["render",function(n,a){return(0,t.wg)(),(0,t.iD)("div",null,i)}]])},8947:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t=JSON.parse('{"key":"v-db6698f0","path":"/guide/04.Javascript/JavaScript.html","title":"入门","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、简介","slug":"一、简介","link":"#一、简介","children":[{"level":3,"title":"1.定义","slug":"_1-定义","link":"#_1-定义","children":[]},{"level":3,"title":"2.作用","slug":"_2-作用","link":"#_2-作用","children":[]},{"level":3,"title":"3.分类","slug":"_3-分类","link":"#_3-分类","children":[]}]},{"level":2,"title":"二、引入方式","slug":"二、引入方式","link":"#二、引入方式","children":[{"level":3,"title":"1.内嵌式","slug":"_1-内嵌式","link":"#_1-内嵌式","children":[]},{"level":3,"title":"2.外链式","slug":"_2-外链式","link":"#_2-外链式","children":[]},{"level":3,"title":"3.行内式","slug":"_3-行内式","link":"#_3-行内式","children":[]}]},{"level":2,"title":"一、变量","slug":"一、变量","link":"#一、变量","children":[{"level":3,"title":"1.定义","slug":"_1-定义-1","link":"#_1-定义-1","children":[]},{"level":3,"title":"2.标识符","slug":"_2-标识符","link":"#_2-标识符","children":[]},{"level":3,"title":"3.关键字","slug":"_3-关键字","link":"#_3-关键字","children":[]}]},{"level":2,"title":"二、数据类型","slug":"二、数据类型","link":"#二、数据类型","children":[{"level":3,"title":"1.基本数据类型","slug":"_1-基本数据类型","link":"#_1-基本数据类型","children":[]},{"level":3,"title":"2.数据类型检测","slug":"_2-数据类型检测","link":"#_2-数据类型检测","children":[]},{"level":3,"title":"3.数据类型转换","slug":"_3-数据类型转换","link":"#_3-数据类型转换","children":[]}]},{"level":2,"title":"三、运算符","slug":"三、运算符","link":"#三、运算符","children":[{"level":3,"title":"1.算数运算符","slug":"_1-算数运算符","link":"#_1-算数运算符","children":[]},{"level":3,"title":"2.字符串运算符","slug":"_2-字符串运算符","link":"#_2-字符串运算符","children":[]},{"level":3,"title":"3.赋值运算符","slug":"_3-赋值运算符","link":"#_3-赋值运算符","children":[]},{"level":3,"title":"4.比较运算符","slug":"_4-比较运算符","link":"#_4-比较运算符","children":[]},{"level":3,"title":"5.逻辑运算符","slug":"_5-逻辑运算符","link":"#_5-逻辑运算符","children":[]},{"level":3,"title":"6.三元运算符","slug":"_6-三元运算符","link":"#_6-三元运算符","children":[]},{"level":3,"title":"7.位运算符","slug":"_7-位运算符","link":"#_7-位运算符","children":[]},{"level":3,"title":"8.运算符优先级","slug":"_8-运算符优先级","link":"#_8-运算符优先级","children":[]}]},{"level":2,"title":"四、流程控制","slug":"四、流程控制","link":"#四、流程控制","children":[{"level":3,"title":"1.if语句","slug":"_1-if语句","link":"#_1-if语句","children":[]},{"level":3,"title":"2.if···else语句","slug":"_2-if···else语句","link":"#_2-if···else语句","children":[]},{"level":3,"title":"3.switch语句","slug":"_3-switch语句","link":"#_3-switch语句","children":[]},{"level":3,"title":"4.while循环","slug":"_4-while循环","link":"#_4-while循环","children":[]},{"level":3,"title":"5.do···while循环","slug":"_5-do···while循环","link":"#_5-do···while循环","children":[]},{"level":3,"title":"6.for循环","slug":"_6-for循环","link":"#_6-for循环","children":[]},{"level":3,"title":"7.循环嵌套","slug":"_7-循环嵌套","link":"#_7-循环嵌套","children":[]}]},{"level":2,"title":"一、基本操作","slug":"一、基本操作","link":"#一、基本操作","children":[{"level":3,"title":"1.数组定义","slug":"_1-数组定义","link":"#_1-数组定义","children":[]},{"level":3,"title":"2.创建数组","slug":"_2-创建数组","link":"#_2-创建数组","children":[]},{"level":3,"title":"3.获取长度","slug":"_3-获取长度","link":"#_3-获取长度","children":[]},{"level":3,"title":"4.遍历数组","slug":"_4-遍历数组","link":"#_4-遍历数组","children":[]},{"level":3,"title":"5.增加元素","slug":"_5-增加元素","link":"#_5-增加元素","children":[]},{"level":3,"title":"6.删除元素","slug":"_6-删除元素","link":"#_6-删除元素","children":[]},{"level":3,"title":"7.修改元素","slug":"_7-修改元素","link":"#_7-修改元素","children":[]},{"level":3,"title":"8.查找数组","slug":"_8-查找数组","link":"#_8-查找数组","children":[]}]},{"level":2,"title":"二、二维数组","slug":"二、二维数组","link":"#二、二维数组","children":[{"level":3,"title":"1.创建数组","slug":"_1-创建数组","link":"#_1-创建数组","children":[]},{"level":3,"title":"2.遍历数组","slug":"_2-遍历数组","link":"#_2-遍历数组","children":[]},{"level":3,"title":"3.数组转置","slug":"_3-数组转置","link":"#_3-数组转置","children":[]}]},{"level":2,"title":"三、数组排序","slug":"三、数组排序","link":"#三、数组排序","children":[{"level":3,"title":"1.冒泡排序","slug":"_1-冒泡排序","link":"#_1-冒泡排序","children":[]},{"level":3,"title":"2.插入排序","slug":"_2-插入排序","link":"#_2-插入排序","children":[]},{"level":3,"title":"3.快速排序","slug":"_3-快速排序","link":"#_3-快速排序","children":[]},{"level":3,"title":"4.选择排序","slug":"_4-选择排序","link":"#_4-选择排序","children":[]},{"level":3,"title":"5.希尔排序","slug":"_5-希尔排序","link":"#_5-希尔排序","children":[]},{"level":3,"title":"6.归并排序","slug":"_6-归并排序","link":"#_6-归并排序","children":[]},{"level":3,"title":"7.堆排序","slug":"_7-堆排序","link":"#_7-堆排序","children":[]},{"level":3,"title":"8.桶排序","slug":"_8-桶排序","link":"#_8-桶排序","children":[]},{"level":3,"title":"10.计数排序","slug":"_10-计数排序","link":"#_10-计数排序","children":[]}]},{"level":2,"title":"四、数组方法","slug":"四、数组方法","link":"#四、数组方法","children":[{"level":3,"title":"1.栈和队列","slug":"_1-栈和队列","link":"#_1-栈和队列","children":[]},{"level":3,"title":"2.检索方法","slug":"_2-检索方法","link":"#_2-检索方法","children":[]},{"level":3,"title":"3.数组转字符串","slug":"_3-数组转字符串","link":"#_3-数组转字符串","children":[]},{"level":3,"title":"4.数据过滤","slug":"_4-数据过滤","link":"#_4-数据过滤","children":[]},{"level":3,"title":"5.其他方法","slug":"_5-其他方法","link":"#_5-其他方法","children":[]}]},{"level":2,"title":"一、定义与调用","slug":"一、定义与调用","link":"#一、定义与调用","children":[{"level":3,"title":"1.定义","slug":"_1-定义-2","link":"#_1-定义-2","children":[]},{"level":3,"title":"2.参数","slug":"_2-参数","link":"#_2-参数","children":[]}]},{"level":2,"title":"二、作用域","slug":"二、作用域","link":"#二、作用域","children":[{"level":3,"title":"1.全局变量","slug":"_1-全局变量","link":"#_1-全局变量","children":[]},{"level":3,"title":"2.局部变量","slug":"_2-局部变量","link":"#_2-局部变量","children":[]},{"level":3,"title":"3.块级变量","slug":"_3-块级变量","link":"#_3-块级变量","children":[]},{"level":3,"title":"4.垃圾回收","slug":"_4-垃圾回收","link":"#_4-垃圾回收","children":[]}]},{"level":2,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]},{"level":2,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":2,"title":"函数嵌套","slug":"函数嵌套","link":"#函数嵌套","children":[]},{"level":2,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":2,"title":"闭包函数","slug":"闭包函数","link":"#闭包函数","children":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"定义对象","slug":"定义对象","link":"#定义对象","children":[]},{"level":3,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":3,"title":"访问对象成员","slug":"访问对象成员","link":"#访问对象成员","children":[]},{"level":3,"title":"遍历对象","slug":"遍历对象","link":"#遍历对象","children":[]},{"level":3,"title":"对象是否存在","slug":"对象是否存在","link":"#对象是否存在","children":[]},{"level":3,"title":"深浅拷贝","slug":"深浅拷贝","link":"#深浅拷贝","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"自定义构造函数","slug":"自定义构造函数","link":"#自定义构造函数","children":[]},{"level":3,"title":"class关键字","slug":"class关键字","link":"#class关键字","children":[]},{"level":3,"title":"私有成员","slug":"私有成员","link":"#私有成员","children":[]},{"level":3,"title":"return 关键字","slug":"return-关键字","link":"#return-关键字","children":[]},{"level":3,"title":"this","slug":"this","link":"#this","children":[]},{"level":3,"title":"更改this指向","slug":"更改this指向","link":"#更改this指向","children":[]},{"level":3,"title":"String对象","slug":"string对象","link":"#string对象","children":[]}]},{"level":2,"title":"Number对象","slug":"number对象","link":"#number对象","children":[]},{"level":2,"title":"date方法","slug":"date方法","link":"#date方法","children":[]},{"level":2,"title":"Math对象","slug":"math对象","link":"#math对象","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":2,"title":"报错信息","slug":"报错信息","link":"#报错信息","children":[{"level":3,"title":"语法错误","slug":"语法错误","link":"#语法错误","children":[]},{"level":3,"title":"运行错误","slug":"运行错误","link":"#运行错误","children":[]}]},{"level":2,"title":"常用语句","slug":"常用语句","link":"#常用语句","children":[]},{"level":2,"title":"JSON","slug":"json-1","link":"#json-1","children":[]},{"level":2,"title":"原型和继承","slug":"原型和继承","link":"#原型和继承","children":[]},{"level":2,"title":"BOM对象","slug":"bom对象","link":"#bom对象","children":[]},{"level":2,"title":"window对象","slug":"window对象","link":"#window对象","children":[]},{"level":2,"title":"定时器","slug":"定时器","link":"#定时器","children":[]},{"level":2,"title":"location对象","slug":"location对象","link":"#location对象","children":[]},{"level":2,"title":"history对象","slug":"history对象","link":"#history对象","children":[]},{"level":2,"title":"navigator对象","slug":"navigator对象","link":"#navigator对象","children":[]},{"level":2,"title":"screen对象","slug":"screen对象","link":"#screen对象","children":[]},{"level":2,"title":"DOM","slug":"dom","link":"#dom","children":[{"level":3,"title":"选择元素","slug":"选择元素","link":"#选择元素","children":[]},{"level":3,"title":"使用DOM","slug":"使用dom","link":"#使用dom","children":[]}]}],"git":{},"filePathRelative":"guide/04.Javascript/JavaScript.md"}')}}]);