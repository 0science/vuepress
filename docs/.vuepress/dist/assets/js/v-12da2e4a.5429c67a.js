"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[1935],{1345:(t,e,d)=>{d.r(e),d.d(e,{default:()=>r});var a=d(6252);const l=[(0,a.uE)('<h1 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h1><h2 id="_1-变量" tabindex="-1"><a class="header-anchor" href="#_1-变量"><span>1.变量</span></a></h2><table><thead><tr><th>概念</th><th>解释</th><th>注意</th></tr></thead><tbody><tr><td>变量</td><td>计算机中用来存储数据的“容器”</td><td>var、let</td></tr><tr><td>声明</td><td></td><td></td></tr><tr><td>标识符</td><td></td><td></td></tr><tr><td>关键字</td><td></td><td></td></tr><tr><td>变量名</td><td></td><td>1. 只能是字母、数字、下划线、$，且不能能数字开头<br>2.字母区分大小写，如 Age 和 age 是不同的变量<br>3.JavaScript 内部已占用于单词（关键字或保留字）不允许使用<br>4.尽量保证变量具有一定的语义，见字知义</td></tr><tr><td>常量</td><td>值不改变的量</td><td>常量不允许重新赋值,声明的时候必须赋值</td></tr></tbody></table><h2 id="_2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数据类型"><span>2.数据类型</span></a></h2><h3 id="关键字-let-和-var" tabindex="-1"><a class="header-anchor" href="#关键字-let-和-var"><span>关键字 <code>let</code> 和 <code>var</code></span></a></h3><table><thead><tr><th>能否</th><th>var</th><th>let</th></tr></thead><tbody><tr><td>声明并赋值</td><td>√</td><td>√</td></tr><tr><td>重复声明</td><td>√</td><td>×</td></tr><tr><td>声明多个变量并赋值</td><td>√</td><td>√</td></tr></tbody></table><ul><li>基本数据类型 <ul><li>number 数字型</li><li>string 字符串型</li><li>boolean 布尔型</li><li>undefined 未定义型</li><li>null 空类型</li></ul></li><li>引用数据类型 <ul><li>Object</li></ul></li></ul><table><thead><tr><th>数据类型</th><th></th><th></th></tr></thead><tbody><tr><td>字符串型</td><td>string</td><td>单双反引号包裹</td></tr><tr><td>数值型</td><td>number</td><td>正数、负数、小数</td></tr><tr><td>布尔型</td><td>boolean</td><td>true、false</td></tr><tr><td>未定义型</td><td>undefined</td><td>只声明，未赋值</td></tr><tr><td>空</td><td>null</td><td>有值为空</td></tr></tbody></table><blockquote><p>顺序执行；</p><p>大小写敏感；</p><p>空格省略，换行断句；</p><p>分号可无</p><p>typeof 关键字检测数据类型</p><p>乘、除、取余优先级大于加、减</p><p>加号，数字相加，字符相连</p></blockquote><h2 id="_3-表达式" tabindex="-1"><a class="header-anchor" href="#_3-表达式"><span>3.表达式</span></a></h2><h2 id="_4-运算符" tabindex="-1"><a class="header-anchor" href="#_4-运算符"><span>4.运算符</span></a></h2><h2 id="_5-运算符" tabindex="-1"><a class="header-anchor" href="#_5-运算符"><span>5.运算符</span></a></h2><h2 id="_6-流程控制" tabindex="-1"><a class="header-anchor" href="#_6-流程控制"><span>6.流程控制</span></a></h2><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>变量</td><td>变量是存储数据的容器</td></tr><tr><td>数组</td><td>存储多个数据的容器</td></tr><tr><td>const</td><td>常量，不允许重新赋值</td></tr><tr><td>let</td><td>块级作用域，只在{}中有效，不支持重名</td></tr><tr><td>var</td><td>全局作用域，支持重名，不建议使用</td></tr></tbody></table><h3 id="数字型-算数优先级" tabindex="-1"><a class="header-anchor" href="#数字型-算数优先级"><span>数字型-算数优先级</span></a></h3><p>先括号，再乘除取余，后加减</p><h3 id="字符型-模板字符串" tabindex="-1"><a class="header-anchor" href="#字符型-模板字符串"><span>字符型-模板字符串</span></a></h3><p>反引号+${}</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`${}`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="undefined和null的区别" tabindex="-1"><a class="header-anchor" href="#undefined和null的区别"><span>undefined和null的区别</span></a></h3><p>undefined是只声明，不赋值，说明值没传过来 null是赋值了，但值为空，说明还不知到放什么，先放个null</p><h3 id="检查数据类型" tabindex="-1"><a class="header-anchor" href="#检查数据类型"><span>检查数据类型</span></a></h3><p>typeof关键字</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>let name = &#39;hello&#39;;\nconsole.log(typeof name);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h2><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换"><span>隐式转换</span></a></h3><p><strong>定义</strong>：系统内部自动将数据类型进行转换 <strong>规则</strong>：</p><ol><li>+ 号两边只要有一个是字符串，都会把另外一个转成字符串</li><li>- * / 等都会把数据转成数字类型</li></ol><h3 id="显示转换" tabindex="-1"><a class="header-anchor" href="#显示转换"><span>显示转换</span></a></h3><p><strong>定义</strong>：避免因隐式转换带来的问题</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/26841888/1711528245269-490db65a-ec16-4f4a-aacd-3fcad84d5c51.png#averageHue=%23f7f6f3&amp;clientId=u77771664-34fa-4&amp;from=paste&amp;id=uace12986&amp;originHeight=542&amp;originWidth=736&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u053907c9-3b01-4df5-ab40-a6413c1b20b&amp;title=" alt=""></p><h2 id="报错信息" tabindex="-1"><a class="header-anchor" href="#报错信息"><span>报错信息</span></a></h2><h3 id="语法错误" tabindex="-1"><a class="header-anchor" href="#语法错误"><span>语法错误</span></a></h3><h3 id="运行错误" tabindex="-1"><a class="header-anchor" href="#运行错误"><span>运行错误</span></a></h3><h2 id="常用语句" tabindex="-1"><a class="header-anchor" href="#常用语句"><span>常用语句</span></a></h2><table><thead><tr><th>语句</th><th>功能</th></tr></thead><tbody><tr><td>alert()</td><td>弹出对话框</td></tr><tr><td>console.log()</td><td>打印到控制台</td></tr><tr><td>prompt()</td><td>弹出对话框，返回用户输入的值</td></tr><tr><td>confirm()</td><td>弹出对话框，返回用户点击的按钮</td></tr><tr><td>setInterval()</td><td>定时器</td></tr><tr><td>setTimeout()</td><td>定时器</td></tr><tr><td>document.write()</td><td>向页面写入内容</td></tr></tbody></table><h2 id="boolean类型转换" tabindex="-1"><a class="header-anchor" href="#boolean类型转换"><span>boolean类型转换</span></a></h2><table><thead><tr><th>数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>boolean</td><td>true</td><td>false</td></tr><tr><td>string</td><td>非空字符串</td><td>空</td></tr><tr><td>number</td><td>非零数值</td><td>0、NaN</td></tr></tbody></table><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ol><li>严格区分大小写</li><li>空格、换行、缩进不敏感</li><li>分号可省略</li></ol><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h2><p>async 异步加载 defer 延迟加载</p>',43)],n={},r=(0,d(3744).Z)(n,[["render",function(t,e){return(0,a.wg)(),(0,a.iD)("div",null,l)}]])},5987:(t,e,d)=>{d.r(e),d.d(e,{data:()=>a});const a=JSON.parse('{"key":"v-12da2e4a","path":"/guide/04.Javascript/%E8%AF%AD%E6%B3%95.html","title":"语法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1.变量","slug":"_1-变量","link":"#_1-变量","children":[]},{"level":2,"title":"2.数据类型","slug":"_2-数据类型","link":"#_2-数据类型","children":[{"level":3,"title":"关键字 let 和 var","slug":"关键字-let-和-var","link":"#关键字-let-和-var","children":[]}]},{"level":2,"title":"3.表达式","slug":"_3-表达式","link":"#_3-表达式","children":[]},{"level":2,"title":"4.运算符","slug":"_4-运算符","link":"#_4-运算符","children":[]},{"level":2,"title":"5.运算符","slug":"_5-运算符","link":"#_5-运算符","children":[]},{"level":2,"title":"6.流程控制","slug":"_6-流程控制","link":"#_6-流程控制","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"数字型-算数优先级","slug":"数字型-算数优先级","link":"#数字型-算数优先级","children":[]},{"level":3,"title":"字符型-模板字符串","slug":"字符型-模板字符串","link":"#字符型-模板字符串","children":[]},{"level":3,"title":"undefined和null的区别","slug":"undefined和null的区别","link":"#undefined和null的区别","children":[]},{"level":3,"title":"检查数据类型","slug":"检查数据类型","link":"#检查数据类型","children":[]}]},{"level":2,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"显示转换","slug":"显示转换","link":"#显示转换","children":[]}]},{"level":2,"title":"报错信息","slug":"报错信息","link":"#报错信息","children":[{"level":3,"title":"语法错误","slug":"语法错误","link":"#语法错误","children":[]},{"level":3,"title":"运行错误","slug":"运行错误","link":"#运行错误","children":[]}]},{"level":2,"title":"常用语句","slug":"常用语句","link":"#常用语句","children":[]},{"level":2,"title":"boolean类型转换","slug":"boolean类型转换","link":"#boolean类型转换","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]}],"git":{},"filePathRelative":"guide/04.Javascript/语法.md"}')}}]);