"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[5093],{1652:(e,i,n)=>{n.r(i),n.d(i,{default:()=>d});var l=n(6252);const t=[(0,l.uE)('<h2 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表"><span>线性表</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p><strong>线性表</strong>：n个数据元素的有限序列</p><p><strong>表长</strong>：线性表的元素个数n</p><p><strong>空表</strong>：n=0的线性表</p><p><strong>位序</strong>：数据元素的下标</p><p><strong>表头</strong>：第一个元素</p><p><strong>表尾</strong>：最后一个元素</p><p><strong>前驱</strong>：元素左侧元素</p><p><strong>后继</strong>：元素右侧元素</p><p><strong>直接前驱</strong>：元素左侧相邻元素</p><p><strong>直接后继</strong>：元素右侧相邻元素</p><blockquote><p>每个元素都有前驱（除表首） 每个元素都有后继（除表尾）</p></blockquote><p><strong>线性表的特点</strong>：</p><ol><li>元素个数有限</li><li>元素有先后顺序</li><li>每个元素都是数据元素</li><li>元素大小相同</li><li>元素具有抽象性</li></ol><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>InitList(&amp;L)       \\\\初始化表\nLength(L)          \\\\表长\nLocalElem(L,e)     \\\\按值查找\nGetElem(L,e)       \\\\按位查找\nListInsert(&amp;L,i,e) \\\\插入\nListDelete(&amp;L,i,e) \\\\删除\nPrintList(L)       \\\\输出\nEmpty(L)           \\\\判空\nDestroyList(L)     \\\\销毁\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/*将所有的在线性表Lb中但不在La中的数据元素插入到La中*/\nvoid unionL(SqList *La,SqList Lb)\n{\n\tint La_len,Lb_len,i;\n\tElemType e;                        /*声明与La和Lb相同的数据元素e*/\n\tLa_len=ListLength(*La);            /*求线性表的长度 */\n\tLb_len=ListLength(Lb);\n\tfor (i=1;i&lt;=Lb_len;i++)\n\t{\n\t\tGetElem(Lb,i,&amp;e);              /*取Lb中第i个数据元素赋给e*/\n\t\tif (!LocateElem(*La,e))        /*La中不存在和e相同数据元素*/\n\t\t\tListInsert(La,++La_len,e); /*插入*/\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="顺序表" tabindex="-1"><a class="header-anchor" href="#顺序表"><span>顺序表</span></a></h2><h3 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1"><span>基本概念</span></a></h3><p><strong>顺序表</strong>：线性表的顺序存储，用一组地址连续的存储单元依次存储数据元素</p><p><strong>静态分配</strong>：数组大小和空间固定</p><p><strong>动态分配</strong>：在程序执行过程中分配空间</p><p><strong>地址</strong>：存储器中每个存储单元的编号</p><blockquote><p>线性表从1开始，数组从0开始 线性表具备三个属性：起始位置、最大容量、当前长度 线性表长度小于数组长度</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#define MAXSIZE 20          /* 存储空间初始分配量 */\ntypedef int ElemType;       /* ElemType类型根据实际情况而定，这里为int */\ntypedef struct\n{\n\tElemType data[MAXSIZE]; /* 数组，存储数据元素 */\n\tint length;             /* 线性表当前长度 */\n}SqList;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>顺序表的优缺点</strong></p><ol><li>随机访问，可直接查找特定节点</li><li>存储密度高</li><li>逻辑相邻且物理相邻</li><li>插入删除移动大量元素</li><li>造成空间碎片化</li></ol><h3 id="基本操作-1" tabindex="-1"><a class="header-anchor" href="#基本操作-1"><span>基本操作</span></a></h3><h4 id="读取" tabindex="-1"><a class="header-anchor" href="#读取"><span>读取</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#define OK 1\n#define ERROR 0\n/* Status是函数的类型,其值是函数结果状态代码，如OK等 */\ntypedef int Status;         \n\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值，注意i是指位置，第1个位置的数组是从0开始 */\nStatus GetElem(SqList L,int i,ElemType *e)\n{\n\tif(L.length==0 || i&lt;1 || i&gt;L.length)\n\t\treturn ERROR;\n\t*e=L.data[i-1];\n\n\treturn OK;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h4><ol><li>插入位置不合理，则显示异常</li><li>线性表长度大于数组长度，则显示异常或动态增加容量</li><li>从最后一个元素开始向前遍历到第个元素，并将其向后移动一位</li><li>将元素插入该位置</li><li>表长加一</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */\nStatus ListInsert(SqList *L,int i,ElemType e)\n{ \n\tint k;\n\tif (L-&gt;length==MAXSIZE)  \t\t\t/* 顺序线性表已经满 */\n\t\treturn ERROR;\n\tif (i&lt;1 || i&gt;L-&gt;length+1)\t\t\t/* 当i比第一位置小或者比最后一位置后一位置还要大时 */\n\t\treturn ERROR;\t\t\t\t\n\n\tif (i&lt;=L-&gt;length)        \t\t\t/* 若插入数据位置不在表尾 */\n\t{\n\t\tfor(k=L-&gt;length-1;k&gt;=i-1;k--)  \t/* 将要插入位置后的元素向后移一位 */\n\t\t\tL-&gt;data[k+1]=L-&gt;data[k];\n\t}\n\tL-&gt;data[i-1]=e;          \t\t\t/* 将新元素插入 */\n\tL-&gt;length++;\n\n\treturn OK;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h4><ol><li>位置不合理，则显示异常</li><li>取出删除元素</li><li>从删除元素位置开始遍历到最后一个元素，并将其前移一位</li><li>表长减一</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */\nStatus ListDelete(SqList *L,int i,ElemType *e) \n{ \n\tint k;\n\tif (L-&gt;length==0)               /* 线性表为空 */\n\t\treturn ERROR;\n\tif (i&lt;1 || i&gt;L-&gt;length)         /* 删除位置不正确 */\n\t\treturn ERROR;\n\t*e=L-&gt;data[i-1];\n\tif (i&lt;L-&gt;length)                /* 如果删除不是最后位置 */\n\t{\n\t\tfor(k=i;k&lt;L-&gt;length;k++)\t/* 将删除位置后继元素前移 */\n\t\t\tL-&gt;data[k-1]=L-&gt;data[k];\n\t}\n\tL-&gt;length--;\n\treturn OK;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',37)],s={},d=(0,n(3744).Z)(s,[["render",function(e,i){return(0,l.wg)(),(0,l.iD)("div",null,t)}]])},6602:(e,i,n)=>{n.r(i),n.d(i,{data:()=>l});const l=JSON.parse('{"key":"v-36fcca4c","path":"/guide/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"线性表","slug":"线性表","link":"#线性表","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]}]},{"level":2,"title":"顺序表","slug":"顺序表","link":"#顺序表","children":[{"level":3,"title":"基本概念","slug":"基本概念-1","link":"#基本概念-1","children":[]},{"level":3,"title":"基本操作","slug":"基本操作-1","link":"#基本操作-1","children":[]}]}],"git":{},"filePathRelative":"guide/数据结构/线性表.md"}')}}]);